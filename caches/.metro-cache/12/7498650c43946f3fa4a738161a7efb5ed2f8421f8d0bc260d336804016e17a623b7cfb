{"dependencies":[{"name":"@tanstack/react-query","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"Pzwu/0TIyhnZOrC9PAkpZx92hFo=","exportNames":["*"]}},{"name":"../supabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":39,"index":118}}],"key":"zx/dTdJp0d3TJEOaa003L7FI5PE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useCreatePostMutation = useCreatePostMutation;\n  exports.usePostsQuery = usePostsQuery;\n  exports.useUserVotesQuery = useUserVotesQuery;\n  exports.useVotePostMutation = useVotePostMutation;\n  var _reactQuery = require(_dependencyMap[0], \"@tanstack/react-query\");\n  var _supabase = require(_dependencyMap[1], \"../supabase\");\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  // Fetch posts within radius\n  function usePostsQuery(latitude, longitude, radius = 5000, sortBy = 'new', enabled = true) {\n    _s();\n    return (0, _reactQuery.useQuery)({\n      queryKey: ['posts', latitude, longitude, radius, sortBy],\n      queryFn: async () => {\n        const {\n          data,\n          error\n        } = await _supabase.supabase.rpc('get_posts_within_radius', {\n          user_lat: latitude,\n          user_lon: longitude,\n          radius_meters: radius,\n          sort_by: sortBy,\n          limit_count: 20\n        });\n        if (error) throw error;\n        return data || [];\n      },\n      enabled: enabled && latitude != null && longitude != null,\n      staleTime: 1000 * 60 // 1 minute\n    });\n  }\n\n  // Fetch user's votes\n  _s(usePostsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_reactQuery.useQuery];\n  });\n  function useUserVotesQuery(userId) {\n    _s2();\n    return (0, _reactQuery.useQuery)({\n      queryKey: ['user-votes', userId],\n      queryFn: async () => {\n        const {\n          data,\n          error\n        } = await _supabase.supabase.from('votes_posts').select('post_id, vote_type').eq('user_id', userId);\n        if (error) throw error;\n\n        // Convert to map for easy lookup\n        const votesMap = {};\n        data?.forEach(vote => {\n          votesMap[vote.post_id] = vote.vote_type;\n        });\n        return votesMap;\n      },\n      enabled: !!userId\n    });\n  }\n\n  // Create new post\n  _s2(useUserVotesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_reactQuery.useQuery];\n  });\n  function useCreatePostMutation() {\n    _s3();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        userId,\n        content,\n        latitude,\n        longitude,\n        locationName\n      }) => {\n        const {\n          data,\n          error\n        } = await _supabase.supabase.from('posts').insert({\n          user_id: userId,\n          content: content.trim(),\n          latitude,\n          longitude,\n          location_name: locationName\n        }).select().single();\n        if (error) throw error;\n        return data;\n      },\n      onSuccess: () => {\n        // Invalidate posts queries to refetch\n        queryClient.invalidateQueries({\n          queryKey: ['posts']\n        });\n      }\n    });\n  }\n\n  // Vote on post\n  _s3(useCreatePostMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n  function useVotePostMutation() {\n    _s4();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        userId,\n        postId,\n        voteType\n      }) => {\n        // If voteType is null, delete the vote\n        if (voteType === null) {\n          const {\n            error\n          } = await _supabase.supabase.from('votes_posts').delete().eq('user_id', userId).eq('post_id', postId);\n          if (error) throw error;\n          return null;\n        }\n\n        // Otherwise, upsert the vote\n        const {\n          error\n        } = await _supabase.supabase.rpc('handle_post_vote', {\n          p_user_id: userId,\n          p_post_id: postId,\n          p_vote_type: voteType\n        });\n        if (error) throw error;\n        return voteType;\n      },\n      onSuccess: (_, variables) => {\n        // Invalidate user votes to refetch\n        queryClient.invalidateQueries({\n          queryKey: ['user-votes', variables.userId]\n        });\n        // Optionally invalidate posts to get updated scores\n        queryClient.invalidateQueries({\n          queryKey: ['posts']\n        });\n      }\n    });\n  }\n  _s4(useVotePostMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n});","lineCount":150,"map":[[9,2,1,0],[9,6,1,0,"_reactQuery"],[9,17,1,0],[9,20,1,0,"require"],[9,27,1,0],[9,28,1,0,"_dependencyMap"],[9,42,1,0],[10,2,2,0],[10,6,2,0,"_supabase"],[10,15,2,0],[10,18,2,0,"require"],[10,25,2,0],[10,26,2,0,"_dependencyMap"],[10,40,2,0],[11,2,2,39],[11,6,2,39,"_s"],[11,8,2,39],[11,11,2,39,"$RefreshSig$"],[11,23,2,39],[12,4,2,39,"_s2"],[12,7,2,39],[12,10,2,39,"$RefreshSig$"],[12,22,2,39],[13,4,2,39,"_s3"],[13,7,2,39],[13,10,2,39,"$RefreshSig$"],[13,22,2,39],[14,4,2,39,"_s4"],[14,7,2,39],[14,10,2,39,"$RefreshSig$"],[14,22,2,39],[15,2,4,0],[16,2,5,7],[16,11,5,16,"usePostsQuery"],[16,24,5,29,"usePostsQuery"],[16,25,5,30,"latitude"],[16,33,5,38],[16,35,5,40,"longitude"],[16,44,5,49],[16,46,5,51,"radius"],[16,52,5,57],[16,55,5,60],[16,59,5,64],[16,61,5,66,"sortBy"],[16,67,5,72],[16,70,5,75],[16,75,5,80],[16,77,5,82,"enabled"],[16,84,5,89],[16,87,5,92],[16,91,5,96],[16,93,5,98],[17,4,5,98,"_s"],[17,6,5,98],[18,4,6,2],[18,11,6,9],[18,15,6,9,"useQuery"],[18,35,6,17],[18,37,6,18],[19,6,7,4,"queryKey"],[19,14,7,12],[19,16,7,14],[19,17,7,15],[19,24,7,22],[19,26,7,24,"latitude"],[19,34,7,32],[19,36,7,34,"longitude"],[19,45,7,43],[19,47,7,45,"radius"],[19,53,7,51],[19,55,7,53,"sortBy"],[19,61,7,59],[19,62,7,60],[20,6,8,4,"queryFn"],[20,13,8,11],[20,15,8,13],[20,21,8,13,"queryFn"],[20,22,8,13],[20,27,8,25],[21,8,9,6],[21,14,9,12],[22,10,9,14,"data"],[22,14,9,18],[23,10,9,20,"error"],[24,8,9,26],[24,9,9,27],[24,12,9,30],[24,18,9,36,"supabase"],[24,36,9,44],[24,37,9,45,"rpc"],[24,40,9,48],[24,41,9,49],[24,66,9,74],[24,68,9,76],[25,10,10,8,"user_lat"],[25,18,10,16],[25,20,10,18,"latitude"],[25,28,10,26],[26,10,11,8,"user_lon"],[26,18,11,16],[26,20,11,18,"longitude"],[26,29,11,27],[27,10,12,8,"radius_meters"],[27,23,12,21],[27,25,12,23,"radius"],[27,31,12,29],[28,10,13,8,"sort_by"],[28,17,13,15],[28,19,13,17,"sortBy"],[28,25,13,23],[29,10,14,8,"limit_count"],[29,21,14,19],[29,23,14,21],[30,8,15,6],[30,9,15,7],[30,10,15,8],[31,8,17,6],[31,12,17,10,"error"],[31,17,17,15],[31,19,17,17],[31,25,17,23,"error"],[31,30,17,28],[32,8,18,6],[32,15,18,13,"data"],[32,19,18,17],[32,23,18,21],[32,25,18,23],[33,6,19,4],[33,7,19,5],[34,6,20,4,"enabled"],[34,13,20,11],[34,15,20,13,"enabled"],[34,22,20,20],[34,26,20,24,"latitude"],[34,34,20,32],[34,38,20,36],[34,42,20,40],[34,46,20,44,"longitude"],[34,55,20,53],[34,59,20,57],[34,63,20,61],[35,6,21,4,"staleTime"],[35,15,21,13],[35,17,21,15],[35,21,21,19],[35,24,21,22],[35,26,21,24],[35,27,21,26],[36,4,22,2],[36,5,22,3],[36,6,22,4],[37,2,23,0],[39,2,25,0],[40,2,25,0,"_s"],[40,4,25,0],[40,5,5,16,"usePostsQuery"],[40,18,5,29],[41,4,5,29],[41,12,6,9,"useQuery"],[41,32,6,17],[42,2,6,17],[43,2,26,7],[43,11,26,16,"useUserVotesQuery"],[43,28,26,33,"useUserVotesQuery"],[43,29,26,34,"userId"],[43,35,26,40],[43,37,26,42],[44,4,26,42,"_s2"],[44,7,26,42],[45,4,27,2],[45,11,27,9],[45,15,27,9,"useQuery"],[45,35,27,17],[45,37,27,18],[46,6,28,4,"queryKey"],[46,14,28,12],[46,16,28,14],[46,17,28,15],[46,29,28,27],[46,31,28,29,"userId"],[46,37,28,35],[46,38,28,36],[47,6,29,4,"queryFn"],[47,13,29,11],[47,15,29,13],[47,21,29,13,"queryFn"],[47,22,29,13],[47,27,29,25],[48,8,30,6],[48,14,30,12],[49,10,30,14,"data"],[49,14,30,18],[50,10,30,20,"error"],[51,8,30,26],[51,9,30,27],[51,12,30,30],[51,18,30,36,"supabase"],[51,36,30,44],[51,37,31,9,"from"],[51,41,31,13],[51,42,31,14],[51,55,31,27],[51,56,31,28],[51,57,32,9,"select"],[51,63,32,15],[51,64,32,16],[51,84,32,36],[51,85,32,37],[51,86,33,9,"eq"],[51,88,33,11],[51,89,33,12],[51,98,33,21],[51,100,33,23,"userId"],[51,106,33,29],[51,107,33,30],[52,8,35,6],[52,12,35,10,"error"],[52,17,35,15],[52,19,35,17],[52,25,35,23,"error"],[52,30,35,28],[54,8,37,6],[55,8,38,6],[55,14,38,12,"votesMap"],[55,22,38,20],[55,25,38,23],[55,26,38,24],[55,27,38,25],[56,8,39,6,"data"],[56,12,39,10],[56,14,39,12,"forEach"],[56,21,39,19],[56,22,39,21,"vote"],[56,26,39,25],[56,30,39,30],[57,10,40,8,"votesMap"],[57,18,40,16],[57,19,40,17,"vote"],[57,23,40,21],[57,24,40,22,"post_id"],[57,31,40,29],[57,32,40,30],[57,35,40,33,"vote"],[57,39,40,37],[57,40,40,38,"vote_type"],[57,49,40,47],[58,8,41,6],[58,9,41,7],[58,10,41,8],[59,8,42,6],[59,15,42,13,"votesMap"],[59,23,42,21],[60,6,43,4],[60,7,43,5],[61,6,44,4,"enabled"],[61,13,44,11],[61,15,44,13],[61,16,44,14],[61,17,44,15,"userId"],[62,4,45,2],[62,5,45,3],[62,6,45,4],[63,2,46,0],[65,2,48,0],[66,2,48,0,"_s2"],[66,5,48,0],[66,6,26,16,"useUserVotesQuery"],[66,23,26,33],[67,4,26,33],[67,12,27,9,"useQuery"],[67,32,27,17],[68,2,27,17],[69,2,49,7],[69,11,49,16,"useCreatePostMutation"],[69,32,49,37,"useCreatePostMutation"],[69,33,49,37],[69,35,49,40],[70,4,49,40,"_s3"],[70,7,49,40],[71,4,50,2],[71,10,50,8,"queryClient"],[71,21,50,19],[71,24,50,22],[71,28,50,22,"useQueryClient"],[71,54,50,36],[71,56,50,37],[71,57,50,38],[72,4,52,2],[72,11,52,9],[72,15,52,9,"useMutation"],[72,38,52,20],[72,40,52,21],[73,6,53,4,"mutationFn"],[73,16,53,14],[73,18,53,16],[73,24,53,16,"mutationFn"],[73,25,53,23],[74,8,53,25,"userId"],[74,14,53,31],[75,8,53,33,"content"],[75,15,53,40],[76,8,53,42,"latitude"],[76,16,53,50],[77,8,53,52,"longitude"],[77,17,53,61],[78,8,53,63,"locationName"],[79,6,53,76],[79,7,53,77],[79,12,53,82],[80,8,54,6],[80,14,54,12],[81,10,54,14,"data"],[81,14,54,18],[82,10,54,20,"error"],[83,8,54,26],[83,9,54,27],[83,12,54,30],[83,18,54,36,"supabase"],[83,36,54,44],[83,37,55,9,"from"],[83,41,55,13],[83,42,55,14],[83,49,55,21],[83,50,55,22],[83,51,56,9,"insert"],[83,57,56,15],[83,58,56,16],[84,10,57,10,"user_id"],[84,17,57,17],[84,19,57,19,"userId"],[84,25,57,25],[85,10,58,10,"content"],[85,17,58,17],[85,19,58,19,"content"],[85,26,58,26],[85,27,58,27,"trim"],[85,31,58,31],[85,32,58,32],[85,33,58,33],[86,10,59,10,"latitude"],[86,18,59,18],[87,10,60,10,"longitude"],[87,19,60,19],[88,10,61,10,"location_name"],[88,23,61,23],[88,25,61,25,"locationName"],[89,8,62,8],[89,9,62,9],[89,10,62,10],[89,11,63,9,"select"],[89,17,63,15],[89,18,63,16],[89,19,63,17],[89,20,64,9,"single"],[89,26,64,15],[89,27,64,16],[89,28,64,17],[90,8,66,6],[90,12,66,10,"error"],[90,17,66,15],[90,19,66,17],[90,25,66,23,"error"],[90,30,66,28],[91,8,67,6],[91,15,67,13,"data"],[91,19,67,17],[92,6,68,4],[92,7,68,5],[93,6,69,4,"onSuccess"],[93,15,69,13],[93,17,69,15,"onSuccess"],[93,18,69,15],[93,23,69,21],[94,8,70,6],[95,8,71,6,"queryClient"],[95,19,71,17],[95,20,71,18,"invalidateQueries"],[95,37,71,35],[95,38,71,36],[96,10,71,38,"queryKey"],[96,18,71,46],[96,20,71,48],[96,21,71,49],[96,28,71,56],[97,8,71,58],[97,9,71,59],[97,10,71,60],[98,6,72,4],[99,4,73,2],[99,5,73,3],[99,6,73,4],[100,2,74,0],[102,2,76,0],[103,2,76,0,"_s3"],[103,5,76,0],[103,6,49,16,"useCreatePostMutation"],[103,27,49,37],[104,4,49,37],[104,12,50,22,"useQueryClient"],[104,38,50,36],[104,40,52,9,"useMutation"],[104,63,52,20],[105,2,52,20],[106,2,77,7],[106,11,77,16,"useVotePostMutation"],[106,30,77,35,"useVotePostMutation"],[106,31,77,35],[106,33,77,38],[107,4,77,38,"_s4"],[107,7,77,38],[108,4,78,2],[108,10,78,8,"queryClient"],[108,21,78,19],[108,24,78,22],[108,28,78,22,"useQueryClient"],[108,54,78,36],[108,56,78,37],[108,57,78,38],[109,4,80,2],[109,11,80,9],[109,15,80,9,"useMutation"],[109,38,80,20],[109,40,80,21],[110,6,81,4,"mutationFn"],[110,16,81,14],[110,18,81,16],[110,24,81,16,"mutationFn"],[110,25,81,23],[111,8,81,25,"userId"],[111,14,81,31],[112,8,81,33,"postId"],[112,14,81,39],[113,8,81,41,"voteType"],[114,6,81,50],[114,7,81,51],[114,12,81,56],[115,8,82,6],[116,8,83,6],[116,12,83,10,"voteType"],[116,20,83,18],[116,25,83,23],[116,29,83,27],[116,31,83,29],[117,10,84,8],[117,16,84,14],[118,12,84,16,"error"],[119,10,84,22],[119,11,84,23],[119,14,84,26],[119,20,84,32,"supabase"],[119,38,84,40],[119,39,85,11,"from"],[119,43,85,15],[119,44,85,16],[119,57,85,29],[119,58,85,30],[119,59,86,11,"delete"],[119,65,86,17],[119,66,86,18],[119,67,86,19],[119,68,87,11,"eq"],[119,70,87,13],[119,71,87,14],[119,80,87,23],[119,82,87,25,"userId"],[119,88,87,31],[119,89,87,32],[119,90,88,11,"eq"],[119,92,88,13],[119,93,88,14],[119,102,88,23],[119,104,88,25,"postId"],[119,110,88,31],[119,111,88,32],[120,10,90,8],[120,14,90,12,"error"],[120,19,90,17],[120,21,90,19],[120,27,90,25,"error"],[120,32,90,30],[121,10,91,8],[121,17,91,15],[121,21,91,19],[122,8,92,6],[124,8,94,6],[125,8,95,6],[125,14,95,12],[126,10,95,14,"error"],[127,8,95,20],[127,9,95,21],[127,12,95,24],[127,18,95,30,"supabase"],[127,36,95,38],[127,37,95,39,"rpc"],[127,40,95,42],[127,41,95,43],[127,59,95,61],[127,61,95,63],[128,10,96,8,"p_user_id"],[128,19,96,17],[128,21,96,19,"userId"],[128,27,96,25],[129,10,97,8,"p_post_id"],[129,19,97,17],[129,21,97,19,"postId"],[129,27,97,25],[130,10,98,8,"p_vote_type"],[130,21,98,19],[130,23,98,21,"voteType"],[131,8,99,6],[131,9,99,7],[131,10,99,8],[132,8,101,6],[132,12,101,10,"error"],[132,17,101,15],[132,19,101,17],[132,25,101,23,"error"],[132,30,101,28],[133,8,102,6],[133,15,102,13,"voteType"],[133,23,102,21],[134,6,103,4],[134,7,103,5],[135,6,104,4,"onSuccess"],[135,15,104,13],[135,17,104,15,"onSuccess"],[135,18,104,16,"_"],[135,19,104,17],[135,21,104,19,"variables"],[135,30,104,28],[135,35,104,33],[136,8,105,6],[137,8,106,6,"queryClient"],[137,19,106,17],[137,20,106,18,"invalidateQueries"],[137,37,106,35],[137,38,106,36],[138,10,106,38,"queryKey"],[138,18,106,46],[138,20,106,48],[138,21,106,49],[138,33,106,61],[138,35,106,63,"variables"],[138,44,106,72],[138,45,106,73,"userId"],[138,51,106,79],[139,8,106,81],[139,9,106,82],[139,10,106,83],[140,8,107,6],[141,8,108,6,"queryClient"],[141,19,108,17],[141,20,108,18,"invalidateQueries"],[141,37,108,35],[141,38,108,36],[142,10,108,38,"queryKey"],[142,18,108,46],[142,20,108,48],[142,21,108,49],[142,28,108,56],[143,8,108,58],[143,9,108,59],[143,10,108,60],[144,6,109,4],[145,4,110,2],[145,5,110,3],[145,6,110,4],[146,2,111,0],[147,2,111,1,"_s4"],[147,5,111,1],[147,6,77,16,"useVotePostMutation"],[147,25,77,35],[148,4,77,35],[148,12,78,22,"useQueryClient"],[148,38,78,36],[148,40,80,9,"useMutation"],[148,63,80,20],[149,2,80,20],[150,0,80,20],[150,3]],"functionMap":{"names":["<global>","usePostsQuery","useQuery$argument_0.queryFn","useUserVotesQuery","data.forEach$argument_0","useCreatePostMutation","useMutation$argument_0.mutationFn","useMutation$argument_0.onSuccess","useVotePostMutation"],"mappings":"AAA;OCI;aCG;KDW;CDI;OGG;aDG;oBEU;OFE;KCE;CHG;OKG;gBCI;KDe;eEC;KFG;CLE;OQG;gBFI;KEsB;eDC;KCK;CRE"}},"type":"js/module"}]}