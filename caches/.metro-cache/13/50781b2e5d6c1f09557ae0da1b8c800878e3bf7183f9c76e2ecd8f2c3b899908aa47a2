{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"tslib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":93},"end":{"line":3,"column":32,"index":109}}],"key":"vm88vOsSPZItrLOmMEyUuGkd1y4=","exportNames":["*"],"imports":1}},{"name":"./PostgrestBuilder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":51,"index":162},"end":{"line":4,"column":80,"index":191}}],"key":"v25p5H95xQ2bcPoR7FGoD/7jboE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\").default;\n  var _callSuper = require(_dependencyMap[2], \"@babel/runtime/helpers/callSuper\").default;\n  var _inherits = require(_dependencyMap[3], \"@babel/runtime/helpers/inherits\").default;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var tslib_1 = require(_dependencyMap[4], \"tslib\");\n  var PostgrestBuilder_1 = tslib_1.__importDefault(require(_dependencyMap[5], \"./PostgrestBuilder\"));\n  var PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder_1$d) {\n    function PostgrestTransformBuilder() {\n      _classCallCheck(this, PostgrestTransformBuilder);\n      return _callSuper(this, PostgrestTransformBuilder, arguments);\n    }\n    _inherits(PostgrestTransformBuilder, _PostgrestBuilder_1$d);\n    return _createClass(PostgrestTransformBuilder, [{\n      key: \"select\",\n      value:\n      /**\n       * Perform a SELECT on the query result.\n       *\n       * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n       * return modified rows. By calling this method, modified rows are returned in\n       * `data`.\n       *\n       * @param columns - The columns to retrieve, separated by commas\n       */\n      function select(columns) {\n        // Remove whitespaces except when quoted\n        var quoted = false;\n        var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(c => {\n          if (/\\s/.test(c) && !quoted) {\n            return '';\n          }\n          if (c === '\"') {\n            quoted = !quoted;\n          }\n          return c;\n        }).join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        this.headers.append('Prefer', 'return=representation');\n        return this;\n      }\n      /**\n       * Order the query result by `column`.\n       *\n       * You can call this method multiple times to order by multiple columns.\n       *\n       * You can order referenced tables, but it only affects the ordering of the\n       * parent table if you use `!inner` in the query.\n       *\n       * @param column - The column to order by\n       * @param options - Named parameters\n       * @param options.ascending - If `true`, the result will be in ascending order\n       * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n       * `null`s appear last.\n       * @param options.referencedTable - Set this to order a referenced table by\n       * its columns\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"order\",\n      value: function order(column) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$ascending = _ref.ascending,\n          ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n          nullsFirst = _ref.nullsFirst,\n          foreignTable = _ref.foreignTable,\n          _ref$referencedTable = _ref.referencedTable,\n          referencedTable = _ref$referencedTable === void 0 ? foreignTable : _ref$referencedTable;\n        var key = referencedTable ? `${referencedTable}.order` : 'order';\n        var existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n      }\n      /**\n       * Limit the query result by `count`.\n       *\n       * @param count - The maximum number of rows to return\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"limit\",\n      value: function limit(count) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          foreignTable = _ref2.foreignTable,\n          _ref2$referencedTable = _ref2.referencedTable,\n          referencedTable = _ref2$referencedTable === void 0 ? foreignTable : _ref2$referencedTable;\n        var key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n      }\n      /**\n       * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n       * Only records within this range are returned.\n       * This respects the query order and if there is no order clause the range could behave unexpectedly.\n       * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n       * and fourth rows of the query.\n       *\n       * @param from - The starting index from which to limit the result\n       * @param to - The last index to which to limit the result\n       * @param options - Named parameters\n       * @param options.referencedTable - Set this to limit rows of referenced\n       * tables instead of the parent table\n       * @param options.foreignTable - Deprecated, use `options.referencedTable`\n       * instead\n       */\n    }, {\n      key: \"range\",\n      value: function range(from, to) {\n        var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          foreignTable = _ref3.foreignTable,\n          _ref3$referencedTable = _ref3.referencedTable,\n          referencedTable = _ref3$referencedTable === void 0 ? foreignTable : _ref3$referencedTable;\n        var keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        var keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n      }\n      /**\n       * Set the AbortSignal for the fetch request.\n       *\n       * @param signal - The AbortSignal to use for the fetch request\n       */\n    }, {\n      key: \"abortSignal\",\n      value: function abortSignal(signal) {\n        this.signal = signal;\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n       * returns an error.\n       */\n    }, {\n      key: \"single\",\n      value: function single() {\n        this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n        return this;\n      }\n      /**\n       * Return `data` as a single object instead of an array of objects.\n       *\n       * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n       * this returns an error.\n       */\n    }, {\n      key: \"maybeSingle\",\n      value: function maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n          this.headers.set('Accept', 'application/json');\n        } else {\n          this.headers.set('Accept', 'application/vnd.pgrst.object+json');\n        }\n        this.isMaybeSingle = true;\n        return this;\n      }\n      /**\n       * Return `data` as a string in CSV format.\n       */\n    }, {\n      key: \"csv\",\n      value: function csv() {\n        this.headers.set('Accept', 'text/csv');\n        return this;\n      }\n      /**\n       * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n       */\n    }, {\n      key: \"geojson\",\n      value: function geojson() {\n        this.headers.set('Accept', 'application/geo+json');\n        return this;\n      }\n      /**\n       * Return `data` as the EXPLAIN plan for the query.\n       *\n       * You need to enable the\n       * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n       * setting before using this method.\n       *\n       * @param options - Named parameters\n       *\n       * @param options.analyze - If `true`, the query will be executed and the\n       * actual run time will be returned\n       *\n       * @param options.verbose - If `true`, the query identifier will be returned\n       * and `data` will include the output columns of the query\n       *\n       * @param options.settings - If `true`, include information on configuration\n       * parameters that affect query planning\n       *\n       * @param options.buffers - If `true`, include information on buffer usage\n       *\n       * @param options.wal - If `true`, include information on WAL record generation\n       *\n       * @param options.format - The format of the output, can be `\"text\"` (default)\n       * or `\"json\"`\n       */\n    }, {\n      key: \"explain\",\n      value: function explain() {\n        var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$analyze = _ref4.analyze,\n          analyze = _ref4$analyze === void 0 ? false : _ref4$analyze,\n          _ref4$verbose = _ref4.verbose,\n          verbose = _ref4$verbose === void 0 ? false : _ref4$verbose,\n          _ref4$settings = _ref4.settings,\n          settings = _ref4$settings === void 0 ? false : _ref4$settings,\n          _ref4$buffers = _ref4.buffers,\n          buffers = _ref4$buffers === void 0 ? false : _ref4$buffers,\n          _ref4$wal = _ref4.wal,\n          wal = _ref4$wal === void 0 ? false : _ref4$wal,\n          _ref4$format = _ref4.format,\n          format = _ref4$format === void 0 ? 'text' : _ref4$format;\n        var _a;\n        var options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        var forMediatype = (_a = this.headers.get('Accept')) !== null && _a !== void 0 ? _a : 'application/json';\n        this.headers.set('Accept', `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`);\n        if (format === 'json') {\n          return this;\n        } else {\n          return this;\n        }\n      }\n      /**\n       * Rollback the query.\n       *\n       * `data` will still be returned, but the query is not committed.\n       */\n    }, {\n      key: \"rollback\",\n      value: function rollback() {\n        this.headers.append('Prefer', 'tx=rollback');\n        return this;\n      }\n      /**\n       * Override the type of the returned `data`.\n       *\n       * @typeParam NewResult - The new result type to override with\n       * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n       */\n    }, {\n      key: \"returns\",\n      value: function returns() {\n        return this;\n      }\n      /**\n       * Set the maximum number of rows that can be affected by the query.\n       * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\n       *\n       * @param value - The maximum number of rows that can be affected\n       */\n    }, {\n      key: \"maxAffected\",\n      value: function maxAffected(value) {\n        this.headers.append('Prefer', 'handling=strict');\n        this.headers.append('Prefer', `max-affected=${value}`);\n        return this;\n      }\n    }]);\n  }(PostgrestBuilder_1.default);\n  exports.default = PostgrestTransformBuilder;\n});","lineCount":280,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[4,92,1,13,"default"],[4,99,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[5,86,1,13,"default"],[5,93,1,13],[6,2,1,13],[6,6,1,13,"_callSuper"],[6,16,1,13],[6,19,1,13,"require"],[6,26,1,13],[6,27,1,13,"_dependencyMap"],[6,41,1,13],[6,82,1,13,"default"],[6,89,1,13],[7,2,1,13],[7,6,1,13,"_inherits"],[7,15,1,13],[7,18,1,13,"require"],[7,25,1,13],[7,26,1,13,"_dependencyMap"],[7,40,1,13],[7,80,1,13,"default"],[7,87,1,13],[8,2,2,0,"Object"],[8,8,2,6],[8,9,2,7,"defineProperty"],[8,23,2,21],[8,24,2,22,"exports"],[8,31,2,29],[8,33,2,31],[8,45,2,43],[8,47,2,45],[9,4,2,47,"value"],[9,9,2,52],[9,11,2,54],[10,2,2,59],[10,3,2,60],[10,4,2,61],[11,2,3,0],[11,6,3,6,"tslib_1"],[11,13,3,13],[11,16,3,16,"require"],[11,23,3,23],[11,24,3,23,"_dependencyMap"],[11,38,3,23],[11,50,3,31],[11,51,3,32],[12,2,4,0],[12,6,4,6,"PostgrestBuilder_1"],[12,24,4,24],[12,27,4,27,"tslib_1"],[12,34,4,34],[12,35,4,35,"__importDefault"],[12,50,4,50],[12,51,4,51,"require"],[12,58,4,58],[12,59,4,58,"_dependencyMap"],[12,73,4,58],[12,98,4,79],[12,99,4,80],[12,100,4,81],[13,2,4,82],[13,6,5,6,"PostgrestTransformBuilder"],[13,31,5,31],[13,57,5,31,"_PostgrestBuilder_1$d"],[13,78,5,31],[14,4,5,31],[14,13,5,31,"PostgrestTransformBuilder"],[14,39,5,31],[15,6,5,31,"_classCallCheck"],[15,21,5,31],[15,28,5,31,"PostgrestTransformBuilder"],[15,53,5,31],[16,6,5,31],[16,13,5,31,"_callSuper"],[16,23,5,31],[16,30,5,31,"PostgrestTransformBuilder"],[16,55,5,31],[16,57,5,31,"arguments"],[16,66,5,31],[17,4,5,31],[18,4,5,31,"_inherits"],[18,13,5,31],[18,14,5,31,"PostgrestTransformBuilder"],[18,39,5,31],[18,41,5,31,"_PostgrestBuilder_1$d"],[18,62,5,31],[19,4,5,31],[19,11,5,31,"_createClass"],[19,23,5,31],[19,24,5,31,"PostgrestTransformBuilder"],[19,49,5,31],[20,6,5,31,"key"],[20,9,5,31],[21,6,5,31,"value"],[21,11,5,31],[22,6,6,4],[23,0,7,0],[24,0,8,0],[25,0,9,0],[26,0,10,0],[27,0,11,0],[28,0,12,0],[29,0,13,0],[30,0,14,0],[31,6,15,4],[31,15,15,4,"select"],[31,21,15,10,"select"],[31,22,15,11,"columns"],[31,29,15,18],[31,31,15,20],[32,8,16,8],[33,8,17,8],[33,12,17,12,"quoted"],[33,18,17,18],[33,21,17,21],[33,26,17,26],[34,8,18,8],[34,12,18,14,"cleanedColumns"],[34,26,18,28],[34,29,18,31],[34,30,18,32,"columns"],[34,37,18,39],[34,42,18,44],[34,46,18,48],[34,50,18,52,"columns"],[34,57,18,59],[34,62,18,64],[34,67,18,69],[34,68,18,70],[34,71,18,73,"columns"],[34,78,18,80],[34,81,18,83],[34,84,18,86],[34,86,19,13,"split"],[34,91,19,18],[34,92,19,19],[34,94,19,21],[34,95,19,22],[34,96,20,13,"map"],[34,99,20,16],[34,100,20,18,"c"],[34,101,20,19],[34,105,20,24],[35,10,21,12],[35,14,21,16],[35,18,21,20],[35,19,21,21,"test"],[35,23,21,25],[35,24,21,26,"c"],[35,25,21,27],[35,26,21,28],[35,30,21,32],[35,31,21,33,"quoted"],[35,37,21,39],[35,39,21,41],[36,12,22,16],[36,19,22,23],[36,21,22,25],[37,10,23,12],[38,10,24,12],[38,14,24,16,"c"],[38,15,24,17],[38,20,24,22],[38,23,24,25],[38,25,24,27],[39,12,25,16,"quoted"],[39,18,25,22],[39,21,25,25],[39,22,25,26,"quoted"],[39,28,25,32],[40,10,26,12],[41,10,27,12],[41,17,27,19,"c"],[41,18,27,20],[42,8,28,8],[42,9,28,9],[42,10,28,10],[42,11,29,13,"join"],[42,15,29,17],[42,16,29,18],[42,18,29,20],[42,19,29,21],[43,8,30,8],[43,12,30,12],[43,13,30,13,"url"],[43,16,30,16],[43,17,30,17,"searchParams"],[43,29,30,29],[43,30,30,30,"set"],[43,33,30,33],[43,34,30,34],[43,42,30,42],[43,44,30,44,"cleanedColumns"],[43,58,30,58],[43,59,30,59],[44,8,31,8],[44,12,31,12],[44,13,31,13,"headers"],[44,20,31,20],[44,21,31,21,"append"],[44,27,31,27],[44,28,31,28],[44,36,31,36],[44,38,31,38],[44,61,31,61],[44,62,31,62],[45,8,32,8],[45,15,32,15],[45,19,32,19],[46,6,33,4],[47,6,34,4],[48,0,35,0],[49,0,36,0],[50,0,37,0],[51,0,38,0],[52,0,39,0],[53,0,40,0],[54,0,41,0],[55,0,42,0],[56,0,43,0],[57,0,44,0],[58,0,45,0],[59,0,46,0],[60,0,47,0],[61,0,48,0],[62,0,49,0],[63,0,50,0],[64,0,51,0],[65,4,34,4],[66,6,34,4,"key"],[66,9,34,4],[67,6,34,4,"value"],[67,11,34,4],[67,13,52,4],[67,22,52,4,"order"],[67,27,52,9,"order"],[67,28,52,10,"column"],[67,34,52,16],[67,36,52,104],[68,8,52,104],[68,12,52,104,"_ref"],[68,16,52,104],[68,19,52,104,"arguments"],[68,28,52,104],[68,29,52,104,"length"],[68,35,52,104],[68,43,52,104,"arguments"],[68,52,52,104],[68,60,52,104,"undefined"],[68,69,52,104],[68,72,52,104,"arguments"],[68,81,52,104],[68,87,52,100],[68,88,52,101],[68,89,52,102],[69,10,52,102,"_ref$ascending"],[69,24,52,102],[69,27,52,102,"_ref"],[69,31,52,102],[69,32,52,20,"ascending"],[69,41,52,29],[70,10,52,20,"ascending"],[70,19,52,29],[70,22,52,29,"_ref$ascending"],[70,36,52,29],[70,50,52,32],[70,54,52,36],[70,57,52,36,"_ref$ascending"],[70,71,52,36],[71,10,52,38,"nullsFirst"],[71,20,52,48],[71,23,52,48,"_ref"],[71,27,52,48],[71,28,52,38,"nullsFirst"],[71,38,52,48],[72,10,52,50,"foreignTable"],[72,22,52,62],[72,25,52,62,"_ref"],[72,29,52,62],[72,30,52,50,"foreignTable"],[72,42,52,62],[73,10,52,62,"_ref$referencedTable"],[73,30,52,62],[73,33,52,62,"_ref"],[73,37,52,62],[73,38,52,64,"referencedTable"],[73,53,52,79],[74,10,52,64,"referencedTable"],[74,25,52,79],[74,28,52,79,"_ref$referencedTable"],[74,48,52,79],[74,62,52,82,"foreignTable"],[74,74,52,94],[74,77,52,94,"_ref$referencedTable"],[74,97,52,94],[75,8,53,8],[75,12,53,14,"key"],[75,15,53,17],[75,18,53,20,"referencedTable"],[75,33,53,35],[75,36,53,38],[75,39,53,41,"referencedTable"],[75,54,53,56],[75,62,53,64],[75,65,53,67],[75,72,53,74],[76,8,54,8],[76,12,54,14,"existingOrder"],[76,25,54,27],[76,28,54,30],[76,32,54,34],[76,33,54,35,"url"],[76,36,54,38],[76,37,54,39,"searchParams"],[76,49,54,51],[76,50,54,52,"get"],[76,53,54,55],[76,54,54,56,"key"],[76,57,54,59],[76,58,54,60],[77,8,55,8],[77,12,55,12],[77,13,55,13,"url"],[77,16,55,16],[77,17,55,17,"searchParams"],[77,29,55,29],[77,30,55,30,"set"],[77,33,55,33],[77,34,55,34,"key"],[77,37,55,37],[77,39,55,39],[77,42,55,42,"existingOrder"],[77,55,55,55],[77,58,55,58],[77,61,55,61,"existingOrder"],[77,74,55,74],[77,77,55,77],[77,80,55,80],[77,82,55,82],[77,85,55,85,"column"],[77,91,55,91],[77,95,55,95,"ascending"],[77,104,55,104],[77,107,55,107],[77,112,55,112],[77,115,55,115],[77,121,55,121],[77,124,55,124,"nullsFirst"],[77,134,55,134],[77,139,55,139,"undefined"],[77,148,55,148],[77,151,55,151],[77,153,55,153],[77,156,55,156,"nullsFirst"],[77,166,55,166],[77,169,55,169],[77,182,55,182],[77,185,55,185],[77,197,55,197],[77,199,55,199],[77,200,55,200],[78,8,56,8],[78,15,56,15],[78,19,56,19],[79,6,57,4],[80,6,58,4],[81,0,59,0],[82,0,60,0],[83,0,61,0],[84,0,62,0],[85,0,63,0],[86,0,64,0],[87,0,65,0],[88,0,66,0],[89,0,67,0],[90,4,58,4],[91,6,58,4,"key"],[91,9,58,4],[92,6,58,4,"value"],[92,11,58,4],[92,13,68,4],[92,22,68,4,"limit"],[92,27,68,9,"limit"],[92,28,68,10,"count"],[92,33,68,15],[92,35,68,73],[93,8,68,73],[93,12,68,73,"_ref2"],[93,17,68,73],[93,20,68,73,"arguments"],[93,29,68,73],[93,30,68,73,"length"],[93,36,68,73],[93,44,68,73,"arguments"],[93,53,68,73],[93,61,68,73,"undefined"],[93,70,68,73],[93,73,68,73,"arguments"],[93,82,68,73],[93,88,68,69],[93,89,68,70],[93,90,68,71],[94,10,68,19,"foreignTable"],[94,22,68,31],[94,25,68,31,"_ref2"],[94,30,68,31],[94,31,68,19,"foreignTable"],[94,43,68,31],[95,10,68,31,"_ref2$referencedTable"],[95,31,68,31],[95,34,68,31,"_ref2"],[95,39,68,31],[95,40,68,33,"referencedTable"],[95,55,68,48],[96,10,68,33,"referencedTable"],[96,25,68,48],[96,28,68,48,"_ref2$referencedTable"],[96,49,68,48],[96,63,68,51,"foreignTable"],[96,75,68,63],[96,78,68,63,"_ref2$referencedTable"],[96,99,68,63],[97,8,69,8],[97,12,69,14,"key"],[97,15,69,17],[97,18,69,20],[97,25,69,27,"referencedTable"],[97,40,69,42],[97,45,69,47],[97,56,69,58],[97,59,69,61],[97,66,69,68],[97,69,69,71],[97,72,69,74,"referencedTable"],[97,87,69,89],[97,95,69,97],[98,8,70,8],[98,12,70,12],[98,13,70,13,"url"],[98,16,70,16],[98,17,70,17,"searchParams"],[98,29,70,29],[98,30,70,30,"set"],[98,33,70,33],[98,34,70,34,"key"],[98,37,70,37],[98,39,70,39],[98,42,70,42,"count"],[98,47,70,47],[98,49,70,49],[98,50,70,50],[99,8,71,8],[99,15,71,15],[99,19,71,19],[100,6,72,4],[101,6,73,4],[102,0,74,0],[103,0,75,0],[104,0,76,0],[105,0,77,0],[106,0,78,0],[107,0,79,0],[108,0,80,0],[109,0,81,0],[110,0,82,0],[111,0,83,0],[112,0,84,0],[113,0,85,0],[114,0,86,0],[115,0,87,0],[116,4,73,4],[117,6,73,4,"key"],[117,9,73,4],[118,6,73,4,"value"],[118,11,73,4],[118,13,88,4],[118,22,88,4,"range"],[118,27,88,9,"range"],[118,28,88,10,"from"],[118,32,88,14],[118,34,88,16,"to"],[118,36,88,18],[118,38,88,76],[119,8,88,76],[119,12,88,76,"_ref3"],[119,17,88,76],[119,20,88,76,"arguments"],[119,29,88,76],[119,30,88,76,"length"],[119,36,88,76],[119,44,88,76,"arguments"],[119,53,88,76],[119,61,88,76,"undefined"],[119,70,88,76],[119,73,88,76,"arguments"],[119,82,88,76],[119,88,88,72],[119,89,88,73],[119,90,88,74],[120,10,88,22,"foreignTable"],[120,22,88,34],[120,25,88,34,"_ref3"],[120,30,88,34],[120,31,88,22,"foreignTable"],[120,43,88,34],[121,10,88,34,"_ref3$referencedTable"],[121,31,88,34],[121,34,88,34,"_ref3"],[121,39,88,34],[121,40,88,36,"referencedTable"],[121,55,88,51],[122,10,88,36,"referencedTable"],[122,25,88,51],[122,28,88,51,"_ref3$referencedTable"],[122,49,88,51],[122,63,88,54,"foreignTable"],[122,75,88,66],[122,78,88,66,"_ref3$referencedTable"],[122,99,88,66],[123,8,89,8],[123,12,89,14,"keyOffset"],[123,21,89,23],[123,24,89,26],[123,31,89,33,"referencedTable"],[123,46,89,48],[123,51,89,53],[123,62,89,64],[123,65,89,67],[123,73,89,75],[123,76,89,78],[123,79,89,81,"referencedTable"],[123,94,89,96],[123,103,89,105],[124,8,90,8],[124,12,90,14,"keyLimit"],[124,20,90,22],[124,23,90,25],[124,30,90,32,"referencedTable"],[124,45,90,47],[124,50,90,52],[124,61,90,63],[124,64,90,66],[124,71,90,73],[124,74,90,76],[124,77,90,79,"referencedTable"],[124,92,90,94],[124,100,90,102],[125,8,91,8],[125,12,91,12],[125,13,91,13,"url"],[125,16,91,16],[125,17,91,17,"searchParams"],[125,29,91,29],[125,30,91,30,"set"],[125,33,91,33],[125,34,91,34,"keyOffset"],[125,43,91,43],[125,45,91,45],[125,48,91,48,"from"],[125,52,91,52],[125,54,91,54],[125,55,91,55],[126,8,92,8],[127,8,93,8],[127,12,93,12],[127,13,93,13,"url"],[127,16,93,16],[127,17,93,17,"searchParams"],[127,29,93,29],[127,30,93,30,"set"],[127,33,93,33],[127,34,93,34,"keyLimit"],[127,42,93,42],[127,44,93,44],[127,47,93,47,"to"],[127,49,93,49],[127,52,93,52,"from"],[127,56,93,56],[127,59,93,59],[127,60,93,60],[127,62,93,62],[127,63,93,63],[128,8,94,8],[128,15,94,15],[128,19,94,19],[129,6,95,4],[130,6,96,4],[131,0,97,0],[132,0,98,0],[133,0,99,0],[134,0,100,0],[135,4,96,4],[136,6,96,4,"key"],[136,9,96,4],[137,6,96,4,"value"],[137,11,96,4],[137,13,101,4],[137,22,101,4,"abortSignal"],[137,33,101,15,"abortSignal"],[137,34,101,16,"signal"],[137,40,101,22],[137,42,101,24],[138,8,102,8],[138,12,102,12],[138,13,102,13,"signal"],[138,19,102,19],[138,22,102,22,"signal"],[138,28,102,28],[139,8,103,8],[139,15,103,15],[139,19,103,19],[140,6,104,4],[141,6,105,4],[142,0,106,0],[143,0,107,0],[144,0,108,0],[145,0,109,0],[146,0,110,0],[147,4,105,4],[148,6,105,4,"key"],[148,9,105,4],[149,6,105,4,"value"],[149,11,105,4],[149,13,111,4],[149,22,111,4,"single"],[149,28,111,10,"single"],[149,29,111,10],[149,31,111,13],[150,8,112,8],[150,12,112,12],[150,13,112,13,"headers"],[150,20,112,20],[150,21,112,21,"set"],[150,24,112,24],[150,25,112,25],[150,33,112,33],[150,35,112,35],[150,70,112,70],[150,71,112,71],[151,8,113,8],[151,15,113,15],[151,19,113,19],[152,6,114,4],[153,6,115,4],[154,0,116,0],[155,0,117,0],[156,0,118,0],[157,0,119,0],[158,0,120,0],[159,4,115,4],[160,6,115,4,"key"],[160,9,115,4],[161,6,115,4,"value"],[161,11,115,4],[161,13,121,4],[161,22,121,4,"maybeSingle"],[161,33,121,15,"maybeSingle"],[161,34,121,15],[161,36,121,18],[162,8,122,8],[163,8,123,8],[164,8,124,8],[164,12,124,12],[164,16,124,16],[164,17,124,17,"method"],[164,23,124,23],[164,28,124,28],[164,33,124,33],[164,35,124,35],[165,10,125,12],[165,14,125,16],[165,15,125,17,"headers"],[165,22,125,24],[165,23,125,25,"set"],[165,26,125,28],[165,27,125,29],[165,35,125,37],[165,37,125,39],[165,55,125,57],[165,56,125,58],[166,8,126,8],[166,9,126,9],[166,15,127,13],[167,10,128,12],[167,14,128,16],[167,15,128,17,"headers"],[167,22,128,24],[167,23,128,25,"set"],[167,26,128,28],[167,27,128,29],[167,35,128,37],[167,37,128,39],[167,72,128,74],[167,73,128,75],[168,8,129,8],[169,8,130,8],[169,12,130,12],[169,13,130,13,"isMaybeSingle"],[169,26,130,26],[169,29,130,29],[169,33,130,33],[170,8,131,8],[170,15,131,15],[170,19,131,19],[171,6,132,4],[172,6,133,4],[173,0,134,0],[174,0,135,0],[175,4,133,4],[176,6,133,4,"key"],[176,9,133,4],[177,6,133,4,"value"],[177,11,133,4],[177,13,136,4],[177,22,136,4,"csv"],[177,25,136,7,"csv"],[177,26,136,7],[177,28,136,10],[178,8,137,8],[178,12,137,12],[178,13,137,13,"headers"],[178,20,137,20],[178,21,137,21,"set"],[178,24,137,24],[178,25,137,25],[178,33,137,33],[178,35,137,35],[178,45,137,45],[178,46,137,46],[179,8,138,8],[179,15,138,15],[179,19,138,19],[180,6,139,4],[181,6,140,4],[182,0,141,0],[183,0,142,0],[184,4,140,4],[185,6,140,4,"key"],[185,9,140,4],[186,6,140,4,"value"],[186,11,140,4],[186,13,143,4],[186,22,143,4,"geojson"],[186,29,143,11,"geojson"],[186,30,143,11],[186,32,143,14],[187,8,144,8],[187,12,144,12],[187,13,144,13,"headers"],[187,20,144,20],[187,21,144,21,"set"],[187,24,144,24],[187,25,144,25],[187,33,144,33],[187,35,144,35],[187,57,144,57],[187,58,144,58],[188,8,145,8],[188,15,145,15],[188,19,145,19],[189,6,146,4],[190,6,147,4],[191,0,148,0],[192,0,149,0],[193,0,150,0],[194,0,151,0],[195,0,152,0],[196,0,153,0],[197,0,154,0],[198,0,155,0],[199,0,156,0],[200,0,157,0],[201,0,158,0],[202,0,159,0],[203,0,160,0],[204,0,161,0],[205,0,162,0],[206,0,163,0],[207,0,164,0],[208,0,165,0],[209,0,166,0],[210,0,167,0],[211,0,168,0],[212,0,169,0],[213,0,170,0],[214,0,171,0],[215,4,147,4],[216,6,147,4,"key"],[216,9,147,4],[217,6,147,4,"value"],[217,11,147,4],[217,13,172,4],[217,22,172,4,"explain"],[217,29,172,11,"explain"],[217,30,172,11],[217,32,172,121],[218,8,172,121],[218,12,172,121,"_ref4"],[218,17,172,121],[218,20,172,121,"arguments"],[218,29,172,121],[218,30,172,121,"length"],[218,36,172,121],[218,44,172,121,"arguments"],[218,53,172,121],[218,61,172,121,"undefined"],[218,70,172,121],[218,73,172,121,"arguments"],[218,82,172,121],[218,88,172,117],[218,89,172,118],[218,90,172,119],[219,10,172,119,"_ref4$analyze"],[219,23,172,119],[219,26,172,119,"_ref4"],[219,31,172,119],[219,32,172,14,"analyze"],[219,39,172,21],[220,10,172,14,"analyze"],[220,17,172,21],[220,20,172,21,"_ref4$analyze"],[220,33,172,21],[220,47,172,24],[220,52,172,29],[220,55,172,29,"_ref4$analyze"],[220,68,172,29],[221,10,172,29,"_ref4$verbose"],[221,23,172,29],[221,26,172,29,"_ref4"],[221,31,172,29],[221,32,172,31,"verbose"],[221,39,172,38],[222,10,172,31,"verbose"],[222,17,172,38],[222,20,172,38,"_ref4$verbose"],[222,33,172,38],[222,47,172,41],[222,52,172,46],[222,55,172,46,"_ref4$verbose"],[222,68,172,46],[223,10,172,46,"_ref4$settings"],[223,24,172,46],[223,27,172,46,"_ref4"],[223,32,172,46],[223,33,172,48,"settings"],[223,41,172,56],[224,10,172,48,"settings"],[224,18,172,56],[224,21,172,56,"_ref4$settings"],[224,35,172,56],[224,49,172,59],[224,54,172,64],[224,57,172,64,"_ref4$settings"],[224,71,172,64],[225,10,172,64,"_ref4$buffers"],[225,23,172,64],[225,26,172,64,"_ref4"],[225,31,172,64],[225,32,172,66,"buffers"],[225,39,172,73],[226,10,172,66,"buffers"],[226,17,172,73],[226,20,172,73,"_ref4$buffers"],[226,33,172,73],[226,47,172,76],[226,52,172,81],[226,55,172,81,"_ref4$buffers"],[226,68,172,81],[227,10,172,81,"_ref4$wal"],[227,19,172,81],[227,22,172,81,"_ref4"],[227,27,172,81],[227,28,172,83,"wal"],[227,31,172,86],[228,10,172,83,"wal"],[228,13,172,86],[228,16,172,86,"_ref4$wal"],[228,25,172,86],[228,39,172,89],[228,44,172,94],[228,47,172,94,"_ref4$wal"],[228,56,172,94],[229,10,172,94,"_ref4$format"],[229,22,172,94],[229,25,172,94,"_ref4"],[229,30,172,94],[229,31,172,96,"format"],[229,37,172,102],[230,10,172,96,"format"],[230,16,172,102],[230,19,172,102,"_ref4$format"],[230,31,172,102],[230,45,172,105],[230,51,172,111],[230,54,172,111,"_ref4$format"],[230,66,172,111],[231,8,173,8],[231,12,173,12,"_a"],[231,14,173,14],[232,8,174,8],[232,12,174,14,"options"],[232,19,174,21],[232,22,174,24],[232,23,175,12,"analyze"],[232,30,175,19],[232,33,175,22],[232,42,175,31],[232,45,175,34],[232,49,175,38],[232,51,176,12,"verbose"],[232,58,176,19],[232,61,176,22],[232,70,176,31],[232,73,176,34],[232,77,176,38],[232,79,177,12,"settings"],[232,87,177,20],[232,90,177,23],[232,100,177,33],[232,103,177,36],[232,107,177,40],[232,109,178,12,"buffers"],[232,116,178,19],[232,119,178,22],[232,128,178,31],[232,131,178,34],[232,135,178,38],[232,137,179,12,"wal"],[232,140,179,15],[232,143,179,18],[232,148,179,23],[232,151,179,26],[232,155,179,30],[232,156,180,9],[232,157,181,13,"filter"],[232,163,181,19],[232,164,181,20,"Boolean"],[232,171,181,27],[232,172,181,28],[232,173,182,13,"join"],[232,177,182,17],[232,178,182,18],[232,181,182,21],[232,182,182,22],[233,8,183,8],[234,8,184,8],[234,12,184,14,"forMediatype"],[234,24,184,26],[234,27,184,29],[234,28,184,30,"_a"],[234,30,184,32],[234,33,184,35],[234,37,184,39],[234,38,184,40,"headers"],[234,45,184,47],[234,46,184,48,"get"],[234,49,184,51],[234,50,184,52],[234,58,184,60],[234,59,184,61],[234,65,184,67],[234,69,184,71],[234,73,184,75,"_a"],[234,75,184,77],[234,80,184,82],[234,85,184,87],[234,86,184,88],[234,89,184,91,"_a"],[234,91,184,93],[234,94,184,96],[234,112,184,114],[235,8,185,8],[235,12,185,12],[235,13,185,13,"headers"],[235,20,185,20],[235,21,185,21,"set"],[235,24,185,24],[235,25,185,25],[235,33,185,33],[235,35,185,35],[235,65,185,65,"format"],[235,71,185,71],[235,81,185,81,"forMediatype"],[235,93,185,93],[235,107,185,107,"options"],[235,114,185,114],[235,117,185,117],[235,118,185,118],[236,8,186,8],[236,12,186,12,"format"],[236,18,186,18],[236,23,186,23],[236,29,186,29],[236,31,186,31],[237,10,187,12],[237,17,187,19],[237,21,187,23],[238,8,188,8],[238,9,188,9],[238,15,189,13],[239,10,190,12],[239,17,190,19],[239,21,190,23],[240,8,191,8],[241,6,192,4],[242,6,193,4],[243,0,194,0],[244,0,195,0],[245,0,196,0],[246,0,197,0],[247,4,193,4],[248,6,193,4,"key"],[248,9,193,4],[249,6,193,4,"value"],[249,11,193,4],[249,13,198,4],[249,22,198,4,"rollback"],[249,30,198,12,"rollback"],[249,31,198,12],[249,33,198,15],[250,8,199,8],[250,12,199,12],[250,13,199,13,"headers"],[250,20,199,20],[250,21,199,21,"append"],[250,27,199,27],[250,28,199,28],[250,36,199,36],[250,38,199,38],[250,51,199,51],[250,52,199,52],[251,8,200,8],[251,15,200,15],[251,19,200,19],[252,6,201,4],[253,6,202,4],[254,0,203,0],[255,0,204,0],[256,0,205,0],[257,0,206,0],[258,0,207,0],[259,4,202,4],[260,6,202,4,"key"],[260,9,202,4],[261,6,202,4,"value"],[261,11,202,4],[261,13,208,4],[261,22,208,4,"returns"],[261,29,208,11,"returns"],[261,30,208,11],[261,32,208,14],[262,8,209,8],[262,15,209,15],[262,19,209,19],[263,6,210,4],[264,6,211,4],[265,0,212,0],[266,0,213,0],[267,0,214,0],[268,0,215,0],[269,0,216,0],[270,4,211,4],[271,6,211,4,"key"],[271,9,211,4],[272,6,211,4,"value"],[272,11,211,4],[272,13,217,4],[272,22,217,4,"maxAffected"],[272,33,217,15,"maxAffected"],[272,34,217,16,"value"],[272,39,217,21],[272,41,217,23],[273,8,218,8],[273,12,218,12],[273,13,218,13,"headers"],[273,20,218,20],[273,21,218,21,"append"],[273,27,218,27],[273,28,218,28],[273,36,218,36],[273,38,218,38],[273,55,218,55],[273,56,218,56],[274,8,219,8],[274,12,219,12],[274,13,219,13,"headers"],[274,20,219,20],[274,21,219,21,"append"],[274,27,219,27],[274,28,219,28],[274,36,219,36],[274,38,219,38],[274,54,219,54,"value"],[274,59,219,59],[274,61,219,61],[274,62,219,62],[275,8,220,8],[275,15,220,15],[275,19,220,19],[276,6,221,4],[277,4,221,5],[278,2,221,5],[278,4,5,40,"PostgrestBuilder_1"],[278,22,5,58],[278,23,5,59,"default"],[278,30,5,66],[279,2,223,0,"exports"],[279,9,223,7],[279,10,223,8,"default"],[279,17,223,15],[279,20,223,18,"PostgrestTransformBuilder"],[279,45,223,43],[280,0,223,44],[280,3]],"functionMap":{"names":["<global>","PostgrestTransformBuilder","select","split.map$argument_0","order","limit","range","abortSignal","single","maybeSingle","csv","geojson","explain","rollback","returns","maxAffected"],"mappings":"AAA;ACI;ICU;iBCK;SDQ;KDK;IGmB;KHK;IIW;KJI;IKgB;KLO;IMM;KNG;IOO;KPG;IQO;KRW;ISI;KTG;IUI;KVG;IW0B;KXoB;IYM;KZG;IaO;KbE;IcO;KdI;CDC"},"hasCjsExports":true},"type":"js/module"}]}