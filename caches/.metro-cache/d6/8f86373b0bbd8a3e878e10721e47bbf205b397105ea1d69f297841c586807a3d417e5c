{"dependencies":[{"name":"@tanstack/react-query","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"Pzwu/0TIyhnZOrC9PAkpZx92hFo=","exportNames":["*"]}},{"name":"../supabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":39,"index":118}}],"key":"zx/dTdJp0d3TJEOaa003L7FI5PE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useCommentVotesQuery = useCommentVotesQuery;\n  exports.useCommentsQuery = useCommentsQuery;\n  exports.useCreateCommentMutation = useCreateCommentMutation;\n  exports.useDeleteCommentMutation = useDeleteCommentMutation;\n  exports.useVoteCommentMutation = useVoteCommentMutation;\n  var _reactQuery = require(_dependencyMap[0], \"@tanstack/react-query\");\n  var _supabase = require(_dependencyMap[1], \"../supabase\");\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n  /**\n   * Fetch comments for a specific post\n   */\n  function useCommentsQuery(postId) {\n    _s();\n    return (0, _reactQuery.useQuery)({\n      queryKey: [\"comments\", postId],\n      queryFn: async () => {\n        if (!postId) throw new Error(\"Post ID required\");\n        const {\n          data,\n          error\n        } = await _supabase.supabase.from(\"comments\").select(`\n          *,\n          author:users!comments_user_id_fkey(id, nickname, is_anonymous)\n        `).eq(\"post_id\", postId).order(\"created_at\", {\n          ascending: true\n        });\n        if (error) throw error;\n\n        // Transform to include display name\n        return data.map(comment => ({\n          ...comment,\n          author_nickname: comment.author.is_anonymous ? \"Anonymous\" : comment.author.nickname || \"User\"\n        }));\n      },\n      enabled: !!postId\n    });\n  }\n\n  /**\n   * Fetch user's votes on comments for a post\n   */\n  _s(useCommentsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_reactQuery.useQuery];\n  });\n  function useCommentVotesQuery(postId, userId) {\n    _s2();\n    return (0, _reactQuery.useQuery)({\n      queryKey: [\"comment-votes\", postId, userId],\n      queryFn: async () => {\n        if (!postId || !userId) return {};\n        const {\n          data,\n          error\n        } = await _supabase.supabase.from(\"votes_comments\").select(\"comment_id, vote_type\").eq(\"user_id\", userId).in(\"comment_id\",\n        // Get all comment IDs for this post first\n        (await _supabase.supabase.from(\"comments\").select(\"id\").eq(\"post_id\", postId)).data?.map(c => c.id) || []);\n        if (error) throw error;\n\n        // Convert to map for easy lookup\n        return data.reduce((acc, vote) => {\n          acc[vote.comment_id] = vote.vote_type;\n          return acc;\n        }, {});\n      },\n      enabled: !!postId && !!userId\n    });\n  }\n\n  /**\n   * Create a new comment\n   */\n  _s2(useCommentVotesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_reactQuery.useQuery];\n  });\n  function useCreateCommentMutation() {\n    _s3();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        postId,\n        userId,\n        content\n      }) => {\n        const {\n          data,\n          error\n        } = await _supabase.supabase.from(\"comments\").insert({\n          post_id: postId,\n          user_id: userId,\n          content: content.trim()\n        }).select(`\n          *,\n          author:users!comments_user_id_fkey(id, nickname, is_anonymous)\n        `).single();\n        if (error) throw error;\n\n        // Transform to include display name\n        return {\n          ...data,\n          author_nickname: data.author.is_anonymous ? \"Anonymous\" : data.author.nickname || \"User\"\n        };\n      },\n      onSuccess: (data, variables) => {\n        // Invalidate comments query to refetch\n        queryClient.invalidateQueries([\"comments\", variables.postId]);\n        // Invalidate posts query to update comment count\n        queryClient.invalidateQueries([\"posts\"]);\n      }\n    });\n  }\n\n  /**\n   * Vote on a comment (upvote/downvote)\n   */\n  _s3(useCreateCommentMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n  function useVoteCommentMutation() {\n    _s4();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        userId,\n        commentId,\n        voteType,\n        postId\n      }) => {\n        // Insert or update vote\n        const {\n          error\n        } = await _supabase.supabase.from(\"votes_comments\").upsert({\n          user_id: userId,\n          comment_id: commentId,\n          vote_type: voteType\n        }, {\n          onConflict: \"user_id,comment_id\"\n        });\n        if (error) throw error;\n\n        // Recalculate comment score\n        const {\n          data: votes\n        } = await _supabase.supabase.from(\"votes_comments\").select(\"vote_type\").eq(\"comment_id\", commentId);\n        const newScore = votes?.reduce((sum, vote) => sum + vote.vote_type, 0) || 0;\n        await _supabase.supabase.from(\"comments\").update({\n          score: newScore\n        }).eq(\"id\", commentId);\n      },\n      onSuccess: (_, variables) => {\n        queryClient.invalidateQueries([\"comments\", variables.postId]);\n        queryClient.invalidateQueries([\"comment-votes\", variables.postId]);\n      }\n    });\n  }\n\n  /**\n   * Delete a comment\n   */\n  _s4(useVoteCommentMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n  function useDeleteCommentMutation() {\n    _s5();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        commentId,\n        postId\n      }) => {\n        const {\n          error\n        } = await _supabase.supabase.from(\"comments\").delete().eq(\"id\", commentId);\n        if (error) throw error;\n      },\n      onSuccess: (_, variables) => {\n        queryClient.invalidateQueries([\"comments\", variables.postId]);\n        queryClient.invalidateQueries([\"posts\"]);\n      }\n    });\n  }\n  _s5(useDeleteCommentMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n});","lineCount":192,"map":[[10,2,1,0],[10,6,1,0,"_reactQuery"],[10,17,1,0],[10,20,1,0,"require"],[10,27,1,0],[10,28,1,0,"_dependencyMap"],[10,42,1,0],[11,2,2,0],[11,6,2,0,"_supabase"],[11,15,2,0],[11,18,2,0,"require"],[11,25,2,0],[11,26,2,0,"_dependencyMap"],[11,40,2,0],[12,2,2,39],[12,6,2,39,"_s"],[12,8,2,39],[12,11,2,39,"$RefreshSig$"],[12,23,2,39],[13,4,2,39,"_s2"],[13,7,2,39],[13,10,2,39,"$RefreshSig$"],[13,22,2,39],[14,4,2,39,"_s3"],[14,7,2,39],[14,10,2,39,"$RefreshSig$"],[14,22,2,39],[15,4,2,39,"_s4"],[15,7,2,39],[15,10,2,39,"$RefreshSig$"],[15,22,2,39],[16,4,2,39,"_s5"],[16,7,2,39],[16,10,2,39,"$RefreshSig$"],[16,22,2,39],[17,2,4,0],[18,0,5,0],[19,0,6,0],[20,2,7,7],[20,11,7,16,"useCommentsQuery"],[20,27,7,32,"useCommentsQuery"],[20,28,7,33,"postId"],[20,34,7,39],[20,36,7,41],[21,4,7,41,"_s"],[21,6,7,41],[22,4,8,2],[22,11,8,9],[22,15,8,9,"useQuery"],[22,35,8,17],[22,37,8,18],[23,6,9,4,"queryKey"],[23,14,9,12],[23,16,9,14],[23,17,9,15],[23,27,9,25],[23,29,9,27,"postId"],[23,35,9,33],[23,36,9,34],[24,6,10,4,"queryFn"],[24,13,10,11],[24,15,10,13],[24,21,10,13,"queryFn"],[24,22,10,13],[24,27,10,25],[25,8,11,6],[25,12,11,10],[25,13,11,11,"postId"],[25,19,11,17],[25,21,11,19],[25,27,11,25],[25,31,11,29,"Error"],[25,36,11,34],[25,37,11,35],[25,55,11,53],[25,56,11,54],[26,8,13,6],[26,14,13,12],[27,10,13,14,"data"],[27,14,13,18],[28,10,13,20,"error"],[29,8,13,26],[29,9,13,27],[29,12,13,30],[29,18,13,36,"supabase"],[29,36,13,44],[29,37,14,9,"from"],[29,41,14,13],[29,42,14,14],[29,52,14,24],[29,53,14,25],[29,54,15,9,"select"],[29,60,15,15],[29,61,15,16],[30,0,16,0],[31,0,17,0],[32,0,18,0],[32,9,18,9],[32,10,18,10],[32,11,19,9,"eq"],[32,13,19,11],[32,14,19,12],[32,23,19,21],[32,25,19,23,"postId"],[32,31,19,29],[32,32,19,30],[32,33,20,9,"order"],[32,38,20,14],[32,39,20,15],[32,51,20,27],[32,53,20,29],[33,10,20,31,"ascending"],[33,19,20,40],[33,21,20,42],[34,8,20,47],[34,9,20,48],[34,10,20,49],[35,8,22,6],[35,12,22,10,"error"],[35,17,22,15],[35,19,22,17],[35,25,22,23,"error"],[35,30,22,28],[37,8,24,6],[38,8,25,6],[38,15,25,13,"data"],[38,19,25,17],[38,20,25,18,"map"],[38,23,25,21],[38,24,25,23,"comment"],[38,31,25,30],[38,36,25,36],[39,10,26,8],[39,13,26,11,"comment"],[39,20,26,18],[40,10,27,8,"author_nickname"],[40,25,27,23],[40,27,27,25,"comment"],[40,34,27,32],[40,35,27,33,"author"],[40,41,27,39],[40,42,27,40,"is_anonymous"],[40,54,27,52],[40,57,28,12],[40,68,28,23],[40,71,29,12,"comment"],[40,78,29,19],[40,79,29,20,"author"],[40,85,29,26],[40,86,29,27,"nickname"],[40,94,29,35],[40,98,29,39],[41,8,30,6],[41,9,30,7],[41,10,30,8],[41,11,30,9],[42,6,31,4],[42,7,31,5],[43,6,32,4,"enabled"],[43,13,32,11],[43,15,32,13],[43,16,32,14],[43,17,32,15,"postId"],[44,4,33,2],[44,5,33,3],[44,6,33,4],[45,2,34,0],[47,2,36,0],[48,0,37,0],[49,0,38,0],[50,2,36,0,"_s"],[50,4,36,0],[50,5,7,16,"useCommentsQuery"],[50,21,7,32],[51,4,7,32],[51,12,8,9,"useQuery"],[51,32,8,17],[52,2,8,17],[53,2,39,7],[53,11,39,16,"useCommentVotesQuery"],[53,31,39,36,"useCommentVotesQuery"],[53,32,39,37,"postId"],[53,38,39,43],[53,40,39,45,"userId"],[53,46,39,51],[53,48,39,53],[54,4,39,53,"_s2"],[54,7,39,53],[55,4,40,2],[55,11,40,9],[55,15,40,9,"useQuery"],[55,35,40,17],[55,37,40,18],[56,6,41,4,"queryKey"],[56,14,41,12],[56,16,41,14],[56,17,41,15],[56,32,41,30],[56,34,41,32,"postId"],[56,40,41,38],[56,42,41,40,"userId"],[56,48,41,46],[56,49,41,47],[57,6,42,4,"queryFn"],[57,13,42,11],[57,15,42,13],[57,21,42,13,"queryFn"],[57,22,42,13],[57,27,42,25],[58,8,43,6],[58,12,43,10],[58,13,43,11,"postId"],[58,19,43,17],[58,23,43,21],[58,24,43,22,"userId"],[58,30,43,28],[58,32,43,30],[58,39,43,37],[58,40,43,38],[58,41,43,39],[59,8,45,6],[59,14,45,12],[60,10,45,14,"data"],[60,14,45,18],[61,10,45,20,"error"],[62,8,45,26],[62,9,45,27],[62,12,45,30],[62,18,45,36,"supabase"],[62,36,45,44],[62,37,46,9,"from"],[62,41,46,13],[62,42,46,14],[62,58,46,30],[62,59,46,31],[62,60,47,9,"select"],[62,66,47,15],[62,67,47,16],[62,90,47,39],[62,91,47,40],[62,92,48,9,"eq"],[62,94,48,11],[62,95,48,12],[62,104,48,21],[62,106,48,23,"userId"],[62,112,48,29],[62,113,48,30],[62,114,49,9,"in"],[62,116,49,11],[62,117,50,10],[62,129,50,22],[63,8,51,10],[64,8,52,10],[64,9,53,12],[64,15,53,18,"supabase"],[64,33,53,26],[64,34,54,15,"from"],[64,38,54,19],[64,39,54,20],[64,49,54,30],[64,50,54,31],[64,51,55,15,"select"],[64,57,55,21],[64,58,55,22],[64,62,55,26],[64,63,55,27],[64,64,56,15,"eq"],[64,66,56,17],[64,67,56,18],[64,76,56,27],[64,78,56,29,"postId"],[64,84,56,35],[64,85,56,36],[64,87,57,12,"data"],[64,91,57,16],[64,93,57,18,"map"],[64,96,57,21],[64,97,57,23,"c"],[64,98,57,24],[64,102,57,29,"c"],[64,103,57,30],[64,104,57,31,"id"],[64,106,57,33],[64,107,57,34],[64,111,57,38],[64,113,58,8],[64,114,58,9],[65,8,60,6],[65,12,60,10,"error"],[65,17,60,15],[65,19,60,17],[65,25,60,23,"error"],[65,30,60,28],[67,8,62,6],[68,8,63,6],[68,15,63,13,"data"],[68,19,63,17],[68,20,63,18,"reduce"],[68,26,63,24],[68,27,63,25],[68,28,63,26,"acc"],[68,31,63,29],[68,33,63,31,"vote"],[68,37,63,35],[68,42,63,40],[69,10,64,8,"acc"],[69,13,64,11],[69,14,64,12,"vote"],[69,18,64,16],[69,19,64,17,"comment_id"],[69,29,64,27],[69,30,64,28],[69,33,64,31,"vote"],[69,37,64,35],[69,38,64,36,"vote_type"],[69,47,64,45],[70,10,65,8],[70,17,65,15,"acc"],[70,20,65,18],[71,8,66,6],[71,9,66,7],[71,11,66,9],[71,12,66,10],[71,13,66,11],[71,14,66,12],[72,6,67,4],[72,7,67,5],[73,6,68,4,"enabled"],[73,13,68,11],[73,15,68,13],[73,16,68,14],[73,17,68,15,"postId"],[73,23,68,21],[73,27,68,25],[73,28,68,26],[73,29,68,27,"userId"],[74,4,69,2],[74,5,69,3],[74,6,69,4],[75,2,70,0],[77,2,72,0],[78,0,73,0],[79,0,74,0],[80,2,72,0,"_s2"],[80,5,72,0],[80,6,39,16,"useCommentVotesQuery"],[80,26,39,36],[81,4,39,36],[81,12,40,9,"useQuery"],[81,32,40,17],[82,2,40,17],[83,2,75,7],[83,11,75,16,"useCreateCommentMutation"],[83,35,75,40,"useCreateCommentMutation"],[83,36,75,40],[83,38,75,43],[84,4,75,43,"_s3"],[84,7,75,43],[85,4,76,2],[85,10,76,8,"queryClient"],[85,21,76,19],[85,24,76,22],[85,28,76,22,"useQueryClient"],[85,54,76,36],[85,56,76,37],[85,57,76,38],[86,4,78,2],[86,11,78,9],[86,15,78,9,"useMutation"],[86,38,78,20],[86,40,78,21],[87,6,79,4,"mutationFn"],[87,16,79,14],[87,18,79,16],[87,24,79,16,"mutationFn"],[87,25,79,23],[88,8,79,25,"postId"],[88,14,79,31],[89,8,79,33,"userId"],[89,14,79,39],[90,8,79,41,"content"],[91,6,79,49],[91,7,79,50],[91,12,79,55],[92,8,80,6],[92,14,80,12],[93,10,80,14,"data"],[93,14,80,18],[94,10,80,20,"error"],[95,8,80,26],[95,9,80,27],[95,12,80,30],[95,18,80,36,"supabase"],[95,36,80,44],[95,37,81,9,"from"],[95,41,81,13],[95,42,81,14],[95,52,81,24],[95,53,81,25],[95,54,82,9,"insert"],[95,60,82,15],[95,61,82,16],[96,10,83,10,"post_id"],[96,17,83,17],[96,19,83,19,"postId"],[96,25,83,25],[97,10,84,10,"user_id"],[97,17,84,17],[97,19,84,19,"userId"],[97,25,84,25],[98,10,85,10,"content"],[98,17,85,17],[98,19,85,19,"content"],[98,26,85,26],[98,27,85,27,"trim"],[98,31,85,31],[98,32,85,32],[99,8,86,8],[99,9,86,9],[99,10,86,10],[99,11,87,9,"select"],[99,17,87,15],[99,18,87,16],[100,0,88,0],[101,0,89,0],[102,0,90,0],[102,9,90,9],[102,10,90,10],[102,11,91,9,"single"],[102,17,91,15],[102,18,91,16],[102,19,91,17],[103,8,93,6],[103,12,93,10,"error"],[103,17,93,15],[103,19,93,17],[103,25,93,23,"error"],[103,30,93,28],[105,8,95,6],[106,8,96,6],[106,15,96,13],[107,10,97,8],[107,13,97,11,"data"],[107,17,97,15],[108,10,98,8,"author_nickname"],[108,25,98,23],[108,27,98,25,"data"],[108,31,98,29],[108,32,98,30,"author"],[108,38,98,36],[108,39,98,37,"is_anonymous"],[108,51,98,49],[108,54,99,12],[108,65,99,23],[108,68,100,12,"data"],[108,72,100,16],[108,73,100,17,"author"],[108,79,100,23],[108,80,100,24,"nickname"],[108,88,100,32],[108,92,100,36],[109,8,101,6],[109,9,101,7],[110,6,102,4],[110,7,102,5],[111,6,103,4,"onSuccess"],[111,15,103,13],[111,17,103,15,"onSuccess"],[111,18,103,16,"data"],[111,22,103,20],[111,24,103,22,"variables"],[111,33,103,31],[111,38,103,36],[112,8,104,6],[113,8,105,6,"queryClient"],[113,19,105,17],[113,20,105,18,"invalidateQueries"],[113,37,105,35],[113,38,105,36],[113,39,105,37],[113,49,105,47],[113,51,105,49,"variables"],[113,60,105,58],[113,61,105,59,"postId"],[113,67,105,65],[113,68,105,66],[113,69,105,67],[114,8,106,6],[115,8,107,6,"queryClient"],[115,19,107,17],[115,20,107,18,"invalidateQueries"],[115,37,107,35],[115,38,107,36],[115,39,107,37],[115,46,107,44],[115,47,107,45],[115,48,107,46],[116,6,108,4],[117,4,109,2],[117,5,109,3],[117,6,109,4],[118,2,110,0],[120,2,112,0],[121,0,113,0],[122,0,114,0],[123,2,112,0,"_s3"],[123,5,112,0],[123,6,75,16,"useCreateCommentMutation"],[123,30,75,40],[124,4,75,40],[124,12,76,22,"useQueryClient"],[124,38,76,36],[124,40,78,9,"useMutation"],[124,63,78,20],[125,2,78,20],[126,2,115,7],[126,11,115,16,"useVoteCommentMutation"],[126,33,115,38,"useVoteCommentMutation"],[126,34,115,38],[126,36,115,41],[127,4,115,41,"_s4"],[127,7,115,41],[128,4,116,2],[128,10,116,8,"queryClient"],[128,21,116,19],[128,24,116,22],[128,28,116,22,"useQueryClient"],[128,54,116,36],[128,56,116,37],[128,57,116,38],[129,4,118,2],[129,11,118,9],[129,15,118,9,"useMutation"],[129,38,118,20],[129,40,118,21],[130,6,119,4,"mutationFn"],[130,16,119,14],[130,18,119,16],[130,24,119,16,"mutationFn"],[130,25,119,23],[131,8,119,25,"userId"],[131,14,119,31],[132,8,119,33,"commentId"],[132,17,119,42],[133,8,119,44,"voteType"],[133,16,119,52],[134,8,119,54,"postId"],[135,6,119,61],[135,7,119,62],[135,12,119,67],[136,8,120,6],[137,8,121,6],[137,14,121,12],[138,10,121,14,"error"],[139,8,121,20],[139,9,121,21],[139,12,121,24],[139,18,121,30,"supabase"],[139,36,121,38],[139,37,122,9,"from"],[139,41,122,13],[139,42,122,14],[139,58,122,30],[139,59,122,31],[139,60,123,9,"upsert"],[139,66,123,15],[139,67,124,10],[140,10,125,12,"user_id"],[140,17,125,19],[140,19,125,21,"userId"],[140,25,125,27],[141,10,126,12,"comment_id"],[141,20,126,22],[141,22,126,24,"commentId"],[141,31,126,33],[142,10,127,12,"vote_type"],[142,19,127,21],[142,21,127,23,"voteType"],[143,8,128,10],[143,9,128,11],[143,11,129,10],[144,10,130,12,"onConflict"],[144,20,130,22],[144,22,130,24],[145,8,131,10],[145,9,132,8],[145,10,132,9],[146,8,134,6],[146,12,134,10,"error"],[146,17,134,15],[146,19,134,17],[146,25,134,23,"error"],[146,30,134,28],[148,8,136,6],[149,8,137,6],[149,14,137,12],[150,10,137,14,"data"],[150,14,137,18],[150,16,137,20,"votes"],[151,8,137,26],[151,9,137,27],[151,12,137,30],[151,18,137,36,"supabase"],[151,36,137,44],[151,37,138,9,"from"],[151,41,138,13],[151,42,138,14],[151,58,138,30],[151,59,138,31],[151,60,139,9,"select"],[151,66,139,15],[151,67,139,16],[151,78,139,27],[151,79,139,28],[151,80,140,9,"eq"],[151,82,140,11],[151,83,140,12],[151,95,140,24],[151,97,140,26,"commentId"],[151,106,140,35],[151,107,140,36],[152,8,142,6],[152,14,142,12,"newScore"],[152,22,142,20],[152,25,142,23,"votes"],[152,30,142,28],[152,32,142,30,"reduce"],[152,38,142,36],[152,39,142,37],[152,40,142,38,"sum"],[152,43,142,41],[152,45,142,43,"vote"],[152,49,142,47],[152,54,142,52,"sum"],[152,57,142,55],[152,60,142,58,"vote"],[152,64,142,62],[152,65,142,63,"vote_type"],[152,74,142,72],[152,76,142,74],[152,77,142,75],[152,78,142,76],[152,82,142,80],[152,83,142,81],[153,8,144,6],[153,14,144,12,"supabase"],[153,32,144,20],[153,33,145,9,"from"],[153,37,145,13],[153,38,145,14],[153,48,145,24],[153,49,145,25],[153,50,146,9,"update"],[153,56,146,15],[153,57,146,16],[154,10,146,18,"score"],[154,15,146,23],[154,17,146,25,"newScore"],[155,8,146,34],[155,9,146,35],[155,10,146,36],[155,11,147,9,"eq"],[155,13,147,11],[155,14,147,12],[155,18,147,16],[155,20,147,18,"commentId"],[155,29,147,27],[155,30,147,28],[156,6,148,4],[156,7,148,5],[157,6,149,4,"onSuccess"],[157,15,149,13],[157,17,149,15,"onSuccess"],[157,18,149,16,"_"],[157,19,149,17],[157,21,149,19,"variables"],[157,30,149,28],[157,35,149,33],[158,8,150,6,"queryClient"],[158,19,150,17],[158,20,150,18,"invalidateQueries"],[158,37,150,35],[158,38,150,36],[158,39,150,37],[158,49,150,47],[158,51,150,49,"variables"],[158,60,150,58],[158,61,150,59,"postId"],[158,67,150,65],[158,68,150,66],[158,69,150,67],[159,8,151,6,"queryClient"],[159,19,151,17],[159,20,151,18,"invalidateQueries"],[159,37,151,35],[159,38,151,36],[159,39,151,37],[159,54,151,52],[159,56,151,54,"variables"],[159,65,151,63],[159,66,151,64,"postId"],[159,72,151,70],[159,73,151,71],[159,74,151,72],[160,6,152,4],[161,4,153,2],[161,5,153,3],[161,6,153,4],[162,2,154,0],[164,2,156,0],[165,0,157,0],[166,0,158,0],[167,2,156,0,"_s4"],[167,5,156,0],[167,6,115,16,"useVoteCommentMutation"],[167,28,115,38],[168,4,115,38],[168,12,116,22,"useQueryClient"],[168,38,116,36],[168,40,118,9,"useMutation"],[168,63,118,20],[169,2,118,20],[170,2,159,7],[170,11,159,16,"useDeleteCommentMutation"],[170,35,159,40,"useDeleteCommentMutation"],[170,36,159,40],[170,38,159,43],[171,4,159,43,"_s5"],[171,7,159,43],[172,4,160,2],[172,10,160,8,"queryClient"],[172,21,160,19],[172,24,160,22],[172,28,160,22,"useQueryClient"],[172,54,160,36],[172,56,160,37],[172,57,160,38],[173,4,162,2],[173,11,162,9],[173,15,162,9,"useMutation"],[173,38,162,20],[173,40,162,21],[174,6,163,4,"mutationFn"],[174,16,163,14],[174,18,163,16],[174,24,163,16,"mutationFn"],[174,25,163,23],[175,8,163,25,"commentId"],[175,17,163,34],[176,8,163,36,"postId"],[177,6,163,43],[177,7,163,44],[177,12,163,49],[178,8,164,6],[178,14,164,12],[179,10,164,14,"error"],[180,8,164,20],[180,9,164,21],[180,12,164,24],[180,18,164,30,"supabase"],[180,36,164,38],[180,37,165,9,"from"],[180,41,165,13],[180,42,165,14],[180,52,165,24],[180,53,165,25],[180,54,166,9,"delete"],[180,60,166,15],[180,61,166,16],[180,62,166,17],[180,63,167,9,"eq"],[180,65,167,11],[180,66,167,12],[180,70,167,16],[180,72,167,18,"commentId"],[180,81,167,27],[180,82,167,28],[181,8,169,6],[181,12,169,10,"error"],[181,17,169,15],[181,19,169,17],[181,25,169,23,"error"],[181,30,169,28],[182,6,170,4],[182,7,170,5],[183,6,171,4,"onSuccess"],[183,15,171,13],[183,17,171,15,"onSuccess"],[183,18,171,16,"_"],[183,19,171,17],[183,21,171,19,"variables"],[183,30,171,28],[183,35,171,33],[184,8,172,6,"queryClient"],[184,19,172,17],[184,20,172,18,"invalidateQueries"],[184,37,172,35],[184,38,172,36],[184,39,172,37],[184,49,172,47],[184,51,172,49,"variables"],[184,60,172,58],[184,61,172,59,"postId"],[184,67,172,65],[184,68,172,66],[184,69,172,67],[185,8,173,6,"queryClient"],[185,19,173,17],[185,20,173,18,"invalidateQueries"],[185,37,173,35],[185,38,173,36],[185,39,173,37],[185,46,173,44],[185,47,173,45],[185,48,173,46],[186,6,174,4],[187,4,175,2],[187,5,175,3],[187,6,175,4],[188,2,176,0],[189,2,176,1,"_s5"],[189,5,176,1],[189,6,159,16,"useDeleteCommentMutation"],[189,30,159,40],[190,4,159,40],[190,12,160,22,"useQueryClient"],[190,38,160,36],[190,40,162,9,"useMutation"],[190,63,162,20],[191,2,162,20],[192,0,162,20],[192,3]],"functionMap":{"names":["<global>","useCommentsQuery","useQuery$argument_0.queryFn","data.map$argument_0","useCommentVotesQuery","data.reduce$argument_0","useCreateCommentMutation","useMutation$argument_0.mutationFn","useMutation$argument_0.onSuccess","useVoteCommentMutation","votes.reduce$argument_0","useDeleteCommentMutation"],"mappings":"AAA;OCM;aCG;sBCe;QDK;KDC;CDG;OIK;aFG;sBCe,WD;yBGM;OHG;KEC;CJG;OMK;gBCI;KDuB;eEC;KFK;CNE;OSK;gBFI;qCGuB,mCH;KEM;eDC;KCG;CTE;OWK;gBJI;KIO;eHC;KGG;CXE"}},"type":"js/module"}]}