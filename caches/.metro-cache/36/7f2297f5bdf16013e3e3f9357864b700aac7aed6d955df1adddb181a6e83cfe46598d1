{"dependencies":[{"name":"@tanstack/react-query","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"Pzwu/0TIyhnZOrC9PAkpZx92hFo=","exportNames":["*"]}},{"name":"../supabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":39,"index":118}}],"key":"zx/dTdJp0d3TJEOaa003L7FI5PE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useDeleteNotificationMutation = useDeleteNotificationMutation;\n  exports.useMarkAllReadMutation = useMarkAllReadMutation;\n  exports.useMarkNotificationReadMutation = useMarkNotificationReadMutation;\n  exports.useNotificationsQuery = useNotificationsQuery;\n  exports.useUnreadCountQuery = useUnreadCountQuery;\n  var _reactQuery = require(_dependencyMap[0], \"@tanstack/react-query\");\n  var _supabase = require(_dependencyMap[1], \"../supabase\");\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n  /**\n   * Fetch all notifications for a user\n   */\n  function useNotificationsQuery(userId) {\n    _s();\n    return (0, _reactQuery.useQuery)({\n      queryKey: [\"notifications\", userId],\n      queryFn: async () => {\n        if (!userId) throw new Error(\"User ID required\");\n        const {\n          data,\n          error\n        } = await _supabase.supabase.from(\"notifications\").select(`\n          *,\n          actor:users!notifications_actor_id_fkey(id, nickname, is_anonymous),\n          post:posts(id, content),\n          comment:comments(id, content)\n        `).eq(\"user_id\", userId).order(\"created_at\", {\n          ascending: false\n        }).limit(50);\n        if (error) throw error;\n\n        // Transform data to include display names\n        return data.map(notification => ({\n          ...notification,\n          actor_name: notification.actor?.is_anonymous ? \"Anonymous\" : notification.actor?.nickname || \"Someone\"\n        }));\n      },\n      enabled: !!userId\n    });\n  }\n\n  /**\n   * Get unread notification count\n   */\n  _s(useNotificationsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_reactQuery.useQuery];\n  });\n  function useUnreadCountQuery(userId) {\n    _s2();\n    return (0, _reactQuery.useQuery)({\n      queryKey: [\"notifications-unread-count\", userId],\n      queryFn: async () => {\n        if (!userId) return 0;\n        const {\n          count,\n          error\n        } = await _supabase.supabase.from(\"notifications\").select(\"*\", {\n          count: \"exact\",\n          head: true\n        }).eq(\"user_id\", userId).eq(\"is_read\", false);\n        if (error) throw error;\n        return count || 0;\n      },\n      enabled: !!userId\n    });\n  }\n\n  /**\n   * Mark a notification as read\n   */\n  _s2(useUnreadCountQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_reactQuery.useQuery];\n  });\n  function useMarkNotificationReadMutation() {\n    _s3();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        notificationId\n      }) => {\n        const {\n          error\n        } = await _supabase.supabase.from(\"notifications\").update({\n          is_read: true\n        }).eq(\"id\", notificationId);\n        if (error) throw error;\n      },\n      onSuccess: (_, variables) => {\n        // Invalidate notifications query\n        queryClient.invalidateQueries([\"notifications\"]);\n        queryClient.invalidateQueries([\"notifications-unread-count\"]);\n      }\n    });\n  }\n\n  /**\n   * Mark all notifications as read\n   */\n  _s3(useMarkNotificationReadMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n  function useMarkAllReadMutation() {\n    _s4();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        userId\n      }) => {\n        const {\n          error\n        } = await _supabase.supabase.from(\"notifications\").update({\n          is_read: true\n        }).eq(\"user_id\", userId).eq(\"is_read\", false);\n        if (error) throw error;\n      },\n      onSuccess: () => {\n        queryClient.invalidateQueries([\"notifications\"]);\n        queryClient.invalidateQueries([\"notifications-unread-count\"]);\n      }\n    });\n  }\n\n  /**\n   * Delete a notification\n   */\n  _s4(useMarkAllReadMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n  function useDeleteNotificationMutation() {\n    _s5();\n    const queryClient = (0, _reactQuery.useQueryClient)();\n    return (0, _reactQuery.useMutation)({\n      mutationFn: async ({\n        notificationId\n      }) => {\n        const {\n          error\n        } = await _supabase.supabase.from(\"notifications\").delete().eq(\"id\", notificationId);\n        if (error) throw error;\n      },\n      onSuccess: () => {\n        queryClient.invalidateQueries([\"notifications\"]);\n        queryClient.invalidateQueries([\"notifications-unread-count\"]);\n      }\n    });\n  }\n  _s5(useDeleteNotificationMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_reactQuery.useQueryClient, _reactQuery.useMutation];\n  });\n});","lineCount":157,"map":[[10,2,1,0],[10,6,1,0,"_reactQuery"],[10,17,1,0],[10,20,1,0,"require"],[10,27,1,0],[10,28,1,0,"_dependencyMap"],[10,42,1,0],[11,2,2,0],[11,6,2,0,"_supabase"],[11,15,2,0],[11,18,2,0,"require"],[11,25,2,0],[11,26,2,0,"_dependencyMap"],[11,40,2,0],[12,2,2,39],[12,6,2,39,"_s"],[12,8,2,39],[12,11,2,39,"$RefreshSig$"],[12,23,2,39],[13,4,2,39,"_s2"],[13,7,2,39],[13,10,2,39,"$RefreshSig$"],[13,22,2,39],[14,4,2,39,"_s3"],[14,7,2,39],[14,10,2,39,"$RefreshSig$"],[14,22,2,39],[15,4,2,39,"_s4"],[15,7,2,39],[15,10,2,39,"$RefreshSig$"],[15,22,2,39],[16,4,2,39,"_s5"],[16,7,2,39],[16,10,2,39,"$RefreshSig$"],[16,22,2,39],[17,2,4,0],[18,0,5,0],[19,0,6,0],[20,2,7,7],[20,11,7,16,"useNotificationsQuery"],[20,32,7,37,"useNotificationsQuery"],[20,33,7,38,"userId"],[20,39,7,44],[20,41,7,46],[21,4,7,46,"_s"],[21,6,7,46],[22,4,8,2],[22,11,8,9],[22,15,8,9,"useQuery"],[22,35,8,17],[22,37,8,18],[23,6,9,4,"queryKey"],[23,14,9,12],[23,16,9,14],[23,17,9,15],[23,32,9,30],[23,34,9,32,"userId"],[23,40,9,38],[23,41,9,39],[24,6,10,4,"queryFn"],[24,13,10,11],[24,15,10,13],[24,21,10,13,"queryFn"],[24,22,10,13],[24,27,10,25],[25,8,11,6],[25,12,11,10],[25,13,11,11,"userId"],[25,19,11,17],[25,21,11,19],[25,27,11,25],[25,31,11,29,"Error"],[25,36,11,34],[25,37,11,35],[25,55,11,53],[25,56,11,54],[26,8,13,6],[26,14,13,12],[27,10,13,14,"data"],[27,14,13,18],[28,10,13,20,"error"],[29,8,13,26],[29,9,13,27],[29,12,13,30],[29,18,13,36,"supabase"],[29,36,13,44],[29,37,14,9,"from"],[29,41,14,13],[29,42,14,14],[29,57,14,29],[29,58,14,30],[29,59,15,9,"select"],[29,65,15,15],[29,66,15,16],[30,0,16,0],[31,0,17,0],[32,0,18,0],[33,0,19,0],[34,0,20,0],[34,9,20,9],[34,10,20,10],[34,11,21,9,"eq"],[34,13,21,11],[34,14,21,12],[34,23,21,21],[34,25,21,23,"userId"],[34,31,21,29],[34,32,21,30],[34,33,22,9,"order"],[34,38,22,14],[34,39,22,15],[34,51,22,27],[34,53,22,29],[35,10,22,31,"ascending"],[35,19,22,40],[35,21,22,42],[36,8,22,48],[36,9,22,49],[36,10,22,50],[36,11,23,9,"limit"],[36,16,23,14],[36,17,23,15],[36,19,23,17],[36,20,23,18],[37,8,25,6],[37,12,25,10,"error"],[37,17,25,15],[37,19,25,17],[37,25,25,23,"error"],[37,30,25,28],[39,8,27,6],[40,8,28,6],[40,15,28,13,"data"],[40,19,28,17],[40,20,28,18,"map"],[40,23,28,21],[40,24,28,23,"notification"],[40,36,28,35],[40,41,28,41],[41,10,29,8],[41,13,29,11,"notification"],[41,25,29,23],[42,10,30,8,"actor_name"],[42,20,30,18],[42,22,30,20,"notification"],[42,34,30,32],[42,35,30,33,"actor"],[42,40,30,38],[42,42,30,40,"is_anonymous"],[42,54,30,52],[42,57,31,12],[42,68,31,23],[42,71,32,12,"notification"],[42,83,32,24],[42,84,32,25,"actor"],[42,89,32,30],[42,91,32,32,"nickname"],[42,99,32,40],[42,103,32,44],[43,8,33,6],[43,9,33,7],[43,10,33,8],[43,11,33,9],[44,6,34,4],[44,7,34,5],[45,6,35,4,"enabled"],[45,13,35,11],[45,15,35,13],[45,16,35,14],[45,17,35,15,"userId"],[46,4,36,2],[46,5,36,3],[46,6,36,4],[47,2,37,0],[49,2,39,0],[50,0,40,0],[51,0,41,0],[52,2,39,0,"_s"],[52,4,39,0],[52,5,7,16,"useNotificationsQuery"],[52,26,7,37],[53,4,7,37],[53,12,8,9,"useQuery"],[53,32,8,17],[54,2,8,17],[55,2,42,7],[55,11,42,16,"useUnreadCountQuery"],[55,30,42,35,"useUnreadCountQuery"],[55,31,42,36,"userId"],[55,37,42,42],[55,39,42,44],[56,4,42,44,"_s2"],[56,7,42,44],[57,4,43,2],[57,11,43,9],[57,15,43,9,"useQuery"],[57,35,43,17],[57,37,43,18],[58,6,44,4,"queryKey"],[58,14,44,12],[58,16,44,14],[58,17,44,15],[58,45,44,43],[58,47,44,45,"userId"],[58,53,44,51],[58,54,44,52],[59,6,45,4,"queryFn"],[59,13,45,11],[59,15,45,13],[59,21,45,13,"queryFn"],[59,22,45,13],[59,27,45,25],[60,8,46,6],[60,12,46,10],[60,13,46,11,"userId"],[60,19,46,17],[60,21,46,19],[60,28,46,26],[60,29,46,27],[61,8,48,6],[61,14,48,12],[62,10,48,14,"count"],[62,15,48,19],[63,10,48,21,"error"],[64,8,48,27],[64,9,48,28],[64,12,48,31],[64,18,48,37,"supabase"],[64,36,48,45],[64,37,49,9,"from"],[64,41,49,13],[64,42,49,14],[64,57,49,29],[64,58,49,30],[64,59,50,9,"select"],[64,65,50,15],[64,66,50,16],[64,69,50,19],[64,71,50,21],[65,10,50,23,"count"],[65,15,50,28],[65,17,50,30],[65,24,50,37],[66,10,50,39,"head"],[66,14,50,43],[66,16,50,45],[67,8,50,50],[67,9,50,51],[67,10,50,52],[67,11,51,9,"eq"],[67,13,51,11],[67,14,51,12],[67,23,51,21],[67,25,51,23,"userId"],[67,31,51,29],[67,32,51,30],[67,33,52,9,"eq"],[67,35,52,11],[67,36,52,12],[67,45,52,21],[67,47,52,23],[67,52,52,28],[67,53,52,29],[68,8,54,6],[68,12,54,10,"error"],[68,17,54,15],[68,19,54,17],[68,25,54,23,"error"],[68,30,54,28],[69,8,55,6],[69,15,55,13,"count"],[69,20,55,18],[69,24,55,22],[69,25,55,23],[70,6,56,4],[70,7,56,5],[71,6,57,4,"enabled"],[71,13,57,11],[71,15,57,13],[71,16,57,14],[71,17,57,15,"userId"],[72,4,58,2],[72,5,58,3],[72,6,58,4],[73,2,59,0],[75,2,61,0],[76,0,62,0],[77,0,63,0],[78,2,61,0,"_s2"],[78,5,61,0],[78,6,42,16,"useUnreadCountQuery"],[78,25,42,35],[79,4,42,35],[79,12,43,9,"useQuery"],[79,32,43,17],[80,2,43,17],[81,2,64,7],[81,11,64,16,"useMarkNotificationReadMutation"],[81,42,64,47,"useMarkNotificationReadMutation"],[81,43,64,47],[81,45,64,50],[82,4,64,50,"_s3"],[82,7,64,50],[83,4,65,2],[83,10,65,8,"queryClient"],[83,21,65,19],[83,24,65,22],[83,28,65,22,"useQueryClient"],[83,54,65,36],[83,56,65,37],[83,57,65,38],[84,4,67,2],[84,11,67,9],[84,15,67,9,"useMutation"],[84,38,67,20],[84,40,67,21],[85,6,68,4,"mutationFn"],[85,16,68,14],[85,18,68,16],[85,24,68,16,"mutationFn"],[85,25,68,23],[86,8,68,25,"notificationId"],[87,6,68,40],[87,7,68,41],[87,12,68,46],[88,8,69,6],[88,14,69,12],[89,10,69,14,"error"],[90,8,69,20],[90,9,69,21],[90,12,69,24],[90,18,69,30,"supabase"],[90,36,69,38],[90,37,70,9,"from"],[90,41,70,13],[90,42,70,14],[90,57,70,29],[90,58,70,30],[90,59,71,9,"update"],[90,65,71,15],[90,66,71,16],[91,10,71,18,"is_read"],[91,17,71,25],[91,19,71,27],[92,8,71,32],[92,9,71,33],[92,10,71,34],[92,11,72,9,"eq"],[92,13,72,11],[92,14,72,12],[92,18,72,16],[92,20,72,18,"notificationId"],[92,34,72,32],[92,35,72,33],[93,8,74,6],[93,12,74,10,"error"],[93,17,74,15],[93,19,74,17],[93,25,74,23,"error"],[93,30,74,28],[94,6,75,4],[94,7,75,5],[95,6,76,4,"onSuccess"],[95,15,76,13],[95,17,76,15,"onSuccess"],[95,18,76,16,"_"],[95,19,76,17],[95,21,76,19,"variables"],[95,30,76,28],[95,35,76,33],[96,8,77,6],[97,8,78,6,"queryClient"],[97,19,78,17],[97,20,78,18,"invalidateQueries"],[97,37,78,35],[97,38,78,36],[97,39,78,37],[97,54,78,52],[97,55,78,53],[97,56,78,54],[98,8,79,6,"queryClient"],[98,19,79,17],[98,20,79,18,"invalidateQueries"],[98,37,79,35],[98,38,79,36],[98,39,79,37],[98,67,79,65],[98,68,79,66],[98,69,79,67],[99,6,80,4],[100,4,81,2],[100,5,81,3],[100,6,81,4],[101,2,82,0],[103,2,84,0],[104,0,85,0],[105,0,86,0],[106,2,84,0,"_s3"],[106,5,84,0],[106,6,64,16,"useMarkNotificationReadMutation"],[106,37,64,47],[107,4,64,47],[107,12,65,22,"useQueryClient"],[107,38,65,36],[107,40,67,9,"useMutation"],[107,63,67,20],[108,2,67,20],[109,2,87,7],[109,11,87,16,"useMarkAllReadMutation"],[109,33,87,38,"useMarkAllReadMutation"],[109,34,87,38],[109,36,87,41],[110,4,87,41,"_s4"],[110,7,87,41],[111,4,88,2],[111,10,88,8,"queryClient"],[111,21,88,19],[111,24,88,22],[111,28,88,22,"useQueryClient"],[111,54,88,36],[111,56,88,37],[111,57,88,38],[112,4,90,2],[112,11,90,9],[112,15,90,9,"useMutation"],[112,38,90,20],[112,40,90,21],[113,6,91,4,"mutationFn"],[113,16,91,14],[113,18,91,16],[113,24,91,16,"mutationFn"],[113,25,91,23],[114,8,91,25,"userId"],[115,6,91,32],[115,7,91,33],[115,12,91,38],[116,8,92,6],[116,14,92,12],[117,10,92,14,"error"],[118,8,92,20],[118,9,92,21],[118,12,92,24],[118,18,92,30,"supabase"],[118,36,92,38],[118,37,93,9,"from"],[118,41,93,13],[118,42,93,14],[118,57,93,29],[118,58,93,30],[118,59,94,9,"update"],[118,65,94,15],[118,66,94,16],[119,10,94,18,"is_read"],[119,17,94,25],[119,19,94,27],[120,8,94,32],[120,9,94,33],[120,10,94,34],[120,11,95,9,"eq"],[120,13,95,11],[120,14,95,12],[120,23,95,21],[120,25,95,23,"userId"],[120,31,95,29],[120,32,95,30],[120,33,96,9,"eq"],[120,35,96,11],[120,36,96,12],[120,45,96,21],[120,47,96,23],[120,52,96,28],[120,53,96,29],[121,8,98,6],[121,12,98,10,"error"],[121,17,98,15],[121,19,98,17],[121,25,98,23,"error"],[121,30,98,28],[122,6,99,4],[122,7,99,5],[123,6,100,4,"onSuccess"],[123,15,100,13],[123,17,100,15,"onSuccess"],[123,18,100,15],[123,23,100,21],[124,8,101,6,"queryClient"],[124,19,101,17],[124,20,101,18,"invalidateQueries"],[124,37,101,35],[124,38,101,36],[124,39,101,37],[124,54,101,52],[124,55,101,53],[124,56,101,54],[125,8,102,6,"queryClient"],[125,19,102,17],[125,20,102,18,"invalidateQueries"],[125,37,102,35],[125,38,102,36],[125,39,102,37],[125,67,102,65],[125,68,102,66],[125,69,102,67],[126,6,103,4],[127,4,104,2],[127,5,104,3],[127,6,104,4],[128,2,105,0],[130,2,107,0],[131,0,108,0],[132,0,109,0],[133,2,107,0,"_s4"],[133,5,107,0],[133,6,87,16,"useMarkAllReadMutation"],[133,28,87,38],[134,4,87,38],[134,12,88,22,"useQueryClient"],[134,38,88,36],[134,40,90,9,"useMutation"],[134,63,90,20],[135,2,90,20],[136,2,110,7],[136,11,110,16,"useDeleteNotificationMutation"],[136,40,110,45,"useDeleteNotificationMutation"],[136,41,110,45],[136,43,110,48],[137,4,110,48,"_s5"],[137,7,110,48],[138,4,111,2],[138,10,111,8,"queryClient"],[138,21,111,19],[138,24,111,22],[138,28,111,22,"useQueryClient"],[138,54,111,36],[138,56,111,37],[138,57,111,38],[139,4,113,2],[139,11,113,9],[139,15,113,9,"useMutation"],[139,38,113,20],[139,40,113,21],[140,6,114,4,"mutationFn"],[140,16,114,14],[140,18,114,16],[140,24,114,16,"mutationFn"],[140,25,114,23],[141,8,114,25,"notificationId"],[142,6,114,40],[142,7,114,41],[142,12,114,46],[143,8,115,6],[143,14,115,12],[144,10,115,14,"error"],[145,8,115,20],[145,9,115,21],[145,12,115,24],[145,18,115,30,"supabase"],[145,36,115,38],[145,37,116,9,"from"],[145,41,116,13],[145,42,116,14],[145,57,116,29],[145,58,116,30],[145,59,117,9,"delete"],[145,65,117,15],[145,66,117,16],[145,67,117,17],[145,68,118,9,"eq"],[145,70,118,11],[145,71,118,12],[145,75,118,16],[145,77,118,18,"notificationId"],[145,91,118,32],[145,92,118,33],[146,8,120,6],[146,12,120,10,"error"],[146,17,120,15],[146,19,120,17],[146,25,120,23,"error"],[146,30,120,28],[147,6,121,4],[147,7,121,5],[148,6,122,4,"onSuccess"],[148,15,122,13],[148,17,122,15,"onSuccess"],[148,18,122,15],[148,23,122,21],[149,8,123,6,"queryClient"],[149,19,123,17],[149,20,123,18,"invalidateQueries"],[149,37,123,35],[149,38,123,36],[149,39,123,37],[149,54,123,52],[149,55,123,53],[149,56,123,54],[150,8,124,6,"queryClient"],[150,19,124,17],[150,20,124,18,"invalidateQueries"],[150,37,124,35],[150,38,124,36],[150,39,124,37],[150,67,124,65],[150,68,124,66],[150,69,124,67],[151,6,125,4],[152,4,126,2],[152,5,126,3],[152,6,126,4],[153,2,127,0],[154,2,127,1,"_s5"],[154,5,127,1],[154,6,110,16,"useDeleteNotificationMutation"],[154,35,110,45],[155,4,110,45],[155,12,111,22,"useQueryClient"],[155,38,111,36],[155,40,113,9,"useMutation"],[155,63,113,20],[156,2,113,20],[157,0,113,20],[157,3]],"functionMap":{"names":["<global>","useNotificationsQuery","useQuery$argument_0.queryFn","data.map$argument_0","useUnreadCountQuery","useMarkNotificationReadMutation","useMutation$argument_0.mutationFn","useMutation$argument_0.onSuccess","useMarkAllReadMutation","useDeleteNotificationMutation"],"mappings":"AAA;OCM;aCG;sBCkB;QDK;KDC;CDG;OIK;aFG;KEW;CJG;OKK;gBCI;KDO;eEC;KFI;CLE;OQK;gBFI;KEQ;eDC;KCG;CRE;OSK;gBHI;KGO;eFC;KEG;CTE"}},"type":"js/module"}]}