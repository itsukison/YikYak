{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@tanstack/react-query","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"Pzwu/0TIyhnZOrC9PAkpZx92hFo=","exportNames":["*"],"imports":1}},{"name":"../supabase","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":39,"index":118}}],"key":"zx/dTdJp0d3TJEOaa003L7FI5PE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.usePostsQuery = usePostsQuery;\n  exports.useUserVotesQuery = useUserVotesQuery;\n  exports.useCreatePostMutation = useCreatePostMutation;\n  exports.useVotePostMutation = useVotePostMutation;\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _tanstackReactQuery = require(_dependencyMap[1], \"@tanstack/react-query\");\n  var _supabase = require(_dependencyMap[2], \"../supabase\");\n  // Fetch posts within radius\n  function usePostsQuery(latitude, longitude) {\n    _s();\n    var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5000;\n    var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'new';\n    var enabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    return (0, _tanstackReactQuery.useQuery)({\n      queryKey: ['posts', latitude, longitude, radius, sortBy],\n      queryFn: function () {\n        var _ref = (0, _asyncToGenerator.default)(function* () {\n          var _yield$supabase$rpc = yield _supabase.supabase.rpc('get_posts_within_radius', {\n              user_lat: latitude,\n              user_lon: longitude,\n              radius_meters: radius,\n              sort_by: sortBy,\n              limit_count: 20\n            }),\n            data = _yield$supabase$rpc.data,\n            error = _yield$supabase$rpc.error;\n          if (error) throw error;\n          return data || [];\n        });\n        return function queryFn() {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      enabled: enabled && latitude != null && longitude != null,\n      staleTime: 1000 * 60 // 1 minute\n    });\n  }\n\n  // Fetch user's votes\n  _s(usePostsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_tanstackReactQuery.useQuery];\n  });\n  function useUserVotesQuery(userId) {\n    _s2();\n    return (0, _tanstackReactQuery.useQuery)({\n      queryKey: ['user-votes', userId],\n      queryFn: function () {\n        var _ref2 = (0, _asyncToGenerator.default)(function* () {\n          var _yield$supabase$from$ = yield _supabase.supabase.from('votes_posts').select('post_id, vote_type').eq('user_id', userId),\n            data = _yield$supabase$from$.data,\n            error = _yield$supabase$from$.error;\n          if (error) throw error;\n\n          // Convert to map for easy lookup\n          var votesMap = {};\n          data?.forEach(vote => {\n            votesMap[vote.post_id] = vote.vote_type;\n          });\n          return votesMap;\n        });\n        return function queryFn() {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      enabled: !!userId\n    });\n  }\n\n  // Create new post\n  _s2(useUserVotesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n    return [_tanstackReactQuery.useQuery];\n  });\n  function useCreatePostMutation() {\n    _s3();\n    var queryClient = (0, _tanstackReactQuery.useQueryClient)();\n    return (0, _tanstackReactQuery.useMutation)({\n      mutationFn: function () {\n        var _ref4 = (0, _asyncToGenerator.default)(function* (_ref3) {\n          var userId = _ref3.userId,\n            content = _ref3.content,\n            latitude = _ref3.latitude,\n            longitude = _ref3.longitude,\n            locationName = _ref3.locationName;\n          var _yield$supabase$from$2 = yield _supabase.supabase.from('posts').insert({\n              user_id: userId,\n              content: content.trim(),\n              latitude,\n              longitude,\n              location_name: locationName\n            }).select().single(),\n            data = _yield$supabase$from$2.data,\n            error = _yield$supabase$from$2.error;\n          if (error) throw error;\n          return data;\n        });\n        return function mutationFn(_x) {\n          return _ref4.apply(this, arguments);\n        };\n      }(),\n      onSuccess: () => {\n        // Invalidate posts queries to refetch\n        queryClient.invalidateQueries({\n          queryKey: ['posts']\n        });\n      }\n    });\n  }\n\n  // Vote on post\n  _s3(useCreatePostMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_tanstackReactQuery.useQueryClient, _tanstackReactQuery.useMutation];\n  });\n  function useVotePostMutation() {\n    _s4();\n    var queryClient = (0, _tanstackReactQuery.useQueryClient)();\n    return (0, _tanstackReactQuery.useMutation)({\n      mutationFn: function () {\n        var _ref6 = (0, _asyncToGenerator.default)(function* (_ref5) {\n          var userId = _ref5.userId,\n            postId = _ref5.postId,\n            voteType = _ref5.voteType;\n          // If voteType is null, delete the vote\n          if (voteType === null) {\n            var _yield$supabase$from$3 = yield _supabase.supabase.from('votes_posts').delete().eq('user_id', userId).eq('post_id', postId),\n              _error = _yield$supabase$from$3.error;\n            if (_error) throw _error;\n            return null;\n          }\n\n          // Otherwise, upsert the vote\n          var _yield$supabase$rpc2 = yield _supabase.supabase.rpc('handle_post_vote', {\n              p_user_id: userId,\n              p_post_id: postId,\n              p_vote_type: voteType\n            }),\n            error = _yield$supabase$rpc2.error;\n          if (error) throw error;\n          return voteType;\n        });\n        return function mutationFn(_x2) {\n          return _ref6.apply(this, arguments);\n        };\n      }(),\n      onSuccess: (_, variables) => {\n        // Invalidate user votes to refetch\n        queryClient.invalidateQueries({\n          queryKey: ['user-votes', variables.userId]\n        });\n        // Optionally invalidate posts to get updated scores\n        queryClient.invalidateQueries({\n          queryKey: ['posts']\n        });\n      }\n    });\n  }\n  _s4(useVotePostMutation, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n    return [_tanstackReactQuery.useQueryClient, _tanstackReactQuery.useMutation];\n  });\n});","lineCount":175,"map":[[16,2,5,0,"exports"],[16,9,5,0],[16,10,5,0,"usePostsQuery"],[16,23,5,0],[16,26,5,0,"usePostsQuery"],[16,39,5,0],[17,2,26,0,"exports"],[17,9,26,0],[17,10,26,0,"useUserVotesQuery"],[17,27,26,0],[17,30,26,0,"useUserVotesQuery"],[17,47,26,0],[18,2,49,0,"exports"],[18,9,49,0],[18,10,49,0,"useCreatePostMutation"],[18,31,49,0],[18,34,49,0,"useCreatePostMutation"],[18,55,49,0],[19,2,77,0,"exports"],[19,9,77,0],[19,10,77,0,"useVotePostMutation"],[19,29,77,0],[19,32,77,0,"useVotePostMutation"],[19,51,77,0],[20,2,111,1],[20,6,111,1,"_babelRuntimeHelpersAsyncToGenerator"],[20,42,111,1],[20,45,111,1,"require"],[20,52,111,1],[20,53,111,1,"_dependencyMap"],[20,67,111,1],[21,2,111,1],[21,6,111,1,"_asyncToGenerator"],[21,23,111,1],[21,26,111,1,"_interopDefault"],[21,41,111,1],[21,42,111,1,"_babelRuntimeHelpersAsyncToGenerator"],[21,78,111,1],[22,2,1,0],[22,6,1,0,"_tanstackReactQuery"],[22,25,1,0],[22,28,1,0,"require"],[22,35,1,0],[22,36,1,0,"_dependencyMap"],[22,50,1,0],[23,2,2,0],[23,6,2,0,"_supabase"],[23,15,2,0],[23,18,2,0,"require"],[23,25,2,0],[23,26,2,0,"_dependencyMap"],[23,40,2,0],[24,2,4,0],[25,2,5,7],[25,11,5,16,"usePostsQuery"],[25,24,5,29,"usePostsQuery"],[25,25,5,30,"latitude"],[25,33,5,38],[25,35,5,40,"longitude"],[25,44,5,49],[25,46,5,98],[26,4,5,98,"_s"],[26,6,5,98],[27,4,5,98],[27,8,5,51,"radius"],[27,14,5,57],[27,17,5,57,"arguments"],[27,26,5,57],[27,27,5,57,"length"],[27,33,5,57],[27,41,5,57,"arguments"],[27,50,5,57],[27,58,5,57,"undefined"],[27,67,5,57],[27,70,5,57,"arguments"],[27,79,5,57],[27,85,5,60],[27,89,5,64],[28,4,5,64],[28,8,5,66,"sortBy"],[28,14,5,72],[28,17,5,72,"arguments"],[28,26,5,72],[28,27,5,72,"length"],[28,33,5,72],[28,41,5,72,"arguments"],[28,50,5,72],[28,58,5,72,"undefined"],[28,67,5,72],[28,70,5,72,"arguments"],[28,79,5,72],[28,85,5,75],[28,90,5,80],[29,4,5,80],[29,8,5,82,"enabled"],[29,15,5,89],[29,18,5,89,"arguments"],[29,27,5,89],[29,28,5,89,"length"],[29,34,5,89],[29,42,5,89,"arguments"],[29,51,5,89],[29,59,5,89,"undefined"],[29,68,5,89],[29,71,5,89,"arguments"],[29,80,5,89],[29,86,5,92],[29,90,5,96],[30,4,6,2],[30,11,6,9],[30,15,6,9,"useQuery"],[30,34,6,17],[30,35,6,17,"useQuery"],[30,43,6,17],[30,45,6,18],[31,6,7,4,"queryKey"],[31,14,7,12],[31,16,7,14],[31,17,7,15],[31,24,7,22],[31,26,7,24,"latitude"],[31,34,7,32],[31,36,7,34,"longitude"],[31,45,7,43],[31,47,7,45,"radius"],[31,53,7,51],[31,55,7,53,"sortBy"],[31,61,7,59],[31,62,7,60],[32,6,8,4,"queryFn"],[32,13,8,11],[33,8,8,11],[33,12,8,11,"_ref"],[33,16,8,11],[33,23,8,11,"_asyncToGenerator"],[33,40,8,11],[33,41,8,11,"default"],[33,48,8,11],[33,50,8,13],[33,63,8,25],[34,10,9,6],[34,14,9,6,"_yield$supabase$rpc"],[34,33,9,6],[34,42,9,36,"supabase"],[34,51,9,44],[34,52,9,44,"supabase"],[34,60,9,44],[34,61,9,45,"rpc"],[34,64,9,48],[34,65,9,49],[34,90,9,74],[34,92,9,76],[35,14,10,8,"user_lat"],[35,22,10,16],[35,24,10,18,"latitude"],[35,32,10,26],[36,14,11,8,"user_lon"],[36,22,11,16],[36,24,11,18,"longitude"],[36,33,11,27],[37,14,12,8,"radius_meters"],[37,27,12,21],[37,29,12,23,"radius"],[37,35,12,29],[38,14,13,8,"sort_by"],[38,21,13,15],[38,23,13,17,"sortBy"],[38,29,13,23],[39,14,14,8,"limit_count"],[39,25,14,19],[39,27,14,21],[40,12,15,6],[40,13,15,7],[40,14,15,8],[41,12,9,14,"data"],[41,16,9,18],[41,19,9,18,"_yield$supabase$rpc"],[41,38,9,18],[41,39,9,14,"data"],[41,43,9,18],[42,12,9,20,"error"],[42,17,9,25],[42,20,9,25,"_yield$supabase$rpc"],[42,39,9,25],[42,40,9,20,"error"],[42,45,9,25],[43,10,17,6],[43,14,17,10,"error"],[43,19,17,15],[43,21,17,17],[43,27,17,23,"error"],[43,32,17,28],[44,10,18,6],[44,17,18,13,"data"],[44,21,18,17],[44,25,18,21],[44,27,18,23],[45,8,19,4],[45,9,19,5],[46,8,19,5],[46,24,8,4,"queryFn"],[46,31,8,11,"queryFn"],[46,32,8,11],[47,10,8,11],[47,17,8,11,"_ref"],[47,21,8,11],[47,22,8,11,"apply"],[47,27,8,11],[47,34,8,11,"arguments"],[47,43,8,11],[48,8,8,11],[49,6,8,11],[49,9,19,5],[50,6,20,4,"enabled"],[50,13,20,11],[50,15,20,13,"enabled"],[50,22,20,20],[50,26,20,24,"latitude"],[50,34,20,32],[50,38,20,36],[50,42,20,40],[50,46,20,44,"longitude"],[50,55,20,53],[50,59,20,57],[50,63,20,61],[51,6,21,4,"staleTime"],[51,15,21,13],[51,17,21,15],[51,21,21,19],[51,24,21,22],[51,26,21,24],[51,27,21,26],[52,4,22,2],[52,5,22,3],[52,6,22,4],[53,2,23,0],[55,2,25,0],[56,2,25,0,"_s"],[56,4,25,0],[56,5,5,16,"usePostsQuery"],[56,18,5,29],[57,4,5,29],[57,12,6,9,"useQuery"],[57,31,6,17],[57,32,6,17,"useQuery"],[57,40,6,17],[58,2,6,17],[59,2,26,7],[59,11,26,16,"useUserVotesQuery"],[59,28,26,33,"useUserVotesQuery"],[59,29,26,34,"userId"],[59,35,26,40],[59,37,26,42],[60,4,26,42,"_s2"],[60,7,26,42],[61,4,27,2],[61,11,27,9],[61,15,27,9,"useQuery"],[61,34,27,17],[61,35,27,17,"useQuery"],[61,43,27,17],[61,45,27,18],[62,6,28,4,"queryKey"],[62,14,28,12],[62,16,28,14],[62,17,28,15],[62,29,28,27],[62,31,28,29,"userId"],[62,37,28,35],[62,38,28,36],[63,6,29,4,"queryFn"],[63,13,29,11],[64,8,29,11],[64,12,29,11,"_ref2"],[64,17,29,11],[64,24,29,11,"_asyncToGenerator"],[64,41,29,11],[64,42,29,11,"default"],[64,49,29,11],[64,51,29,13],[64,64,29,25],[65,10,30,6],[65,14,30,6,"_yield$supabase$from$"],[65,35,30,6],[65,44,30,36,"supabase"],[65,53,30,44],[65,54,30,44,"supabase"],[65,62,30,44],[65,63,31,9,"from"],[65,67,31,13],[65,68,31,14],[65,81,31,27],[65,82,31,28],[65,83,32,9,"select"],[65,89,32,15],[65,90,32,16],[65,110,32,36],[65,111,32,37],[65,112,33,9,"eq"],[65,114,33,11],[65,115,33,12],[65,124,33,21],[65,126,33,23,"userId"],[65,132,33,29],[65,133,33,30],[66,12,30,14,"data"],[66,16,30,18],[66,19,30,18,"_yield$supabase$from$"],[66,40,30,18],[66,41,30,14,"data"],[66,45,30,18],[67,12,30,20,"error"],[67,17,30,25],[67,20,30,25,"_yield$supabase$from$"],[67,41,30,25],[67,42,30,20,"error"],[67,47,30,25],[68,10,35,6],[68,14,35,10,"error"],[68,19,35,15],[68,21,35,17],[68,27,35,23,"error"],[68,32,35,28],[70,10,37,6],[71,10,38,6],[71,14,38,12,"votesMap"],[71,22,38,20],[71,25,38,23],[71,26,38,24],[71,27,38,25],[72,10,39,6,"data"],[72,14,39,10],[72,16,39,12,"forEach"],[72,23,39,19],[72,24,39,21,"vote"],[72,28,39,25],[72,32,39,30],[73,12,40,8,"votesMap"],[73,20,40,16],[73,21,40,17,"vote"],[73,25,40,21],[73,26,40,22,"post_id"],[73,33,40,29],[73,34,40,30],[73,37,40,33,"vote"],[73,41,40,37],[73,42,40,38,"vote_type"],[73,51,40,47],[74,10,41,6],[74,11,41,7],[74,12,41,8],[75,10,42,6],[75,17,42,13,"votesMap"],[75,25,42,21],[76,8,43,4],[76,9,43,5],[77,8,43,5],[77,24,29,4,"queryFn"],[77,31,29,11,"queryFn"],[77,32,29,11],[78,10,29,11],[78,17,29,11,"_ref2"],[78,22,29,11],[78,23,29,11,"apply"],[78,28,29,11],[78,35,29,11,"arguments"],[78,44,29,11],[79,8,29,11],[80,6,29,11],[80,9,43,5],[81,6,44,4,"enabled"],[81,13,44,11],[81,15,44,13],[81,16,44,14],[81,17,44,15,"userId"],[82,4,45,2],[82,5,45,3],[82,6,45,4],[83,2,46,0],[85,2,48,0],[86,2,48,0,"_s2"],[86,5,48,0],[86,6,26,16,"useUserVotesQuery"],[86,23,26,33],[87,4,26,33],[87,12,27,9,"useQuery"],[87,31,27,17],[87,32,27,17,"useQuery"],[87,40,27,17],[88,2,27,17],[89,2,49,7],[89,11,49,16,"useCreatePostMutation"],[89,32,49,37,"useCreatePostMutation"],[89,33,49,37],[89,35,49,40],[90,4,49,40,"_s3"],[90,7,49,40],[91,4,50,2],[91,8,50,8,"queryClient"],[91,19,50,19],[91,22,50,22],[91,26,50,22,"useQueryClient"],[91,45,50,36],[91,46,50,36,"useQueryClient"],[91,60,50,36],[91,62,50,37],[91,63,50,38],[92,4,52,2],[92,11,52,9],[92,15,52,9,"useMutation"],[92,34,52,20],[92,35,52,20,"useMutation"],[92,46,52,20],[92,48,52,21],[93,6,53,4,"mutationFn"],[93,16,53,14],[94,8,53,14],[94,12,53,14,"_ref4"],[94,17,53,14],[94,24,53,14,"_asyncToGenerator"],[94,41,53,14],[94,42,53,14,"default"],[94,49,53,14],[94,51,53,16],[94,62,53,16,"_ref3"],[94,67,53,16],[94,69,53,82],[95,10,53,82],[95,14,53,25,"userId"],[95,20,53,31],[95,23,53,31,"_ref3"],[95,28,53,31],[95,29,53,25,"userId"],[95,35,53,31],[96,12,53,33,"content"],[96,19,53,40],[96,22,53,40,"_ref3"],[96,27,53,40],[96,28,53,33,"content"],[96,35,53,40],[97,12,53,42,"latitude"],[97,20,53,50],[97,23,53,50,"_ref3"],[97,28,53,50],[97,29,53,42,"latitude"],[97,37,53,50],[98,12,53,52,"longitude"],[98,21,53,61],[98,24,53,61,"_ref3"],[98,29,53,61],[98,30,53,52,"longitude"],[98,39,53,61],[99,12,53,63,"locationName"],[99,24,53,75],[99,27,53,75,"_ref3"],[99,32,53,75],[99,33,53,63,"locationName"],[99,45,53,75],[100,10,54,6],[100,14,54,6,"_yield$supabase$from$2"],[100,36,54,6],[100,45,54,36,"supabase"],[100,54,54,44],[100,55,54,44,"supabase"],[100,63,54,44],[100,64,55,9,"from"],[100,68,55,13],[100,69,55,14],[100,76,55,21],[100,77,55,22],[100,78,56,9,"insert"],[100,84,56,15],[100,85,56,16],[101,14,57,10,"user_id"],[101,21,57,17],[101,23,57,19,"userId"],[101,29,57,25],[102,14,58,10,"content"],[102,21,58,17],[102,23,58,19,"content"],[102,30,58,26],[102,31,58,27,"trim"],[102,35,58,31],[102,36,58,32],[102,37,58,33],[103,14,59,10,"latitude"],[103,22,59,18],[104,14,60,10,"longitude"],[104,23,60,19],[105,14,61,10,"location_name"],[105,27,61,23],[105,29,61,25,"locationName"],[106,12,62,8],[106,13,62,9],[106,14,62,10],[106,15,63,9,"select"],[106,21,63,15],[106,22,63,16],[106,23,63,17],[106,24,64,9,"single"],[106,30,64,15],[106,31,64,16],[106,32,64,17],[107,12,54,14,"data"],[107,16,54,18],[107,19,54,18,"_yield$supabase$from$2"],[107,41,54,18],[107,42,54,14,"data"],[107,46,54,18],[108,12,54,20,"error"],[108,17,54,25],[108,20,54,25,"_yield$supabase$from$2"],[108,42,54,25],[108,43,54,20,"error"],[108,48,54,25],[109,10,66,6],[109,14,66,10,"error"],[109,19,66,15],[109,21,66,17],[109,27,66,23,"error"],[109,32,66,28],[110,10,67,6],[110,17,67,13,"data"],[110,21,67,17],[111,8,68,4],[111,9,68,5],[112,8,68,5],[112,24,53,4,"mutationFn"],[112,34,53,14,"mutationFn"],[112,35,53,14,"_x"],[112,37,53,14],[113,10,53,14],[113,17,53,14,"_ref4"],[113,22,53,14],[113,23,53,14,"apply"],[113,28,53,14],[113,35,53,14,"arguments"],[113,44,53,14],[114,8,53,14],[115,6,53,14],[115,9,68,5],[116,6,69,4,"onSuccess"],[116,15,69,13],[116,17,69,15,"onSuccess"],[116,18,69,15],[116,23,69,21],[117,8,70,6],[118,8,71,6,"queryClient"],[118,19,71,17],[118,20,71,18,"invalidateQueries"],[118,37,71,35],[118,38,71,36],[119,10,71,38,"queryKey"],[119,18,71,46],[119,20,71,48],[119,21,71,49],[119,28,71,56],[120,8,71,58],[120,9,71,59],[120,10,71,60],[121,6,72,4],[122,4,73,2],[122,5,73,3],[122,6,73,4],[123,2,74,0],[125,2,76,0],[126,2,76,0,"_s3"],[126,5,76,0],[126,6,49,16,"useCreatePostMutation"],[126,27,49,37],[127,4,49,37],[127,12,50,22,"useQueryClient"],[127,31,50,36],[127,32,50,36,"useQueryClient"],[127,46,50,36],[127,48,52,9,"useMutation"],[127,67,52,20],[127,68,52,20,"useMutation"],[127,79,52,20],[128,2,52,20],[129,2,77,7],[129,11,77,16,"useVotePostMutation"],[129,30,77,35,"useVotePostMutation"],[129,31,77,35],[129,33,77,38],[130,4,77,38,"_s4"],[130,7,77,38],[131,4,78,2],[131,8,78,8,"queryClient"],[131,19,78,19],[131,22,78,22],[131,26,78,22,"useQueryClient"],[131,45,78,36],[131,46,78,36,"useQueryClient"],[131,60,78,36],[131,62,78,37],[131,63,78,38],[132,4,80,2],[132,11,80,9],[132,15,80,9,"useMutation"],[132,34,80,20],[132,35,80,20,"useMutation"],[132,46,80,20],[132,48,80,21],[133,6,81,4,"mutationFn"],[133,16,81,14],[134,8,81,14],[134,12,81,14,"_ref6"],[134,17,81,14],[134,24,81,14,"_asyncToGenerator"],[134,41,81,14],[134,42,81,14,"default"],[134,49,81,14],[134,51,81,16],[134,62,81,16,"_ref5"],[134,67,81,16],[134,69,81,56],[135,10,81,56],[135,14,81,25,"userId"],[135,20,81,31],[135,23,81,31,"_ref5"],[135,28,81,31],[135,29,81,25,"userId"],[135,35,81,31],[136,12,81,33,"postId"],[136,18,81,39],[136,21,81,39,"_ref5"],[136,26,81,39],[136,27,81,33,"postId"],[136,33,81,39],[137,12,81,41,"voteType"],[137,20,81,49],[137,23,81,49,"_ref5"],[137,28,81,49],[137,29,81,41,"voteType"],[137,37,81,49],[138,10,82,6],[139,10,83,6],[139,14,83,10,"voteType"],[139,22,83,18],[139,27,83,23],[139,31,83,27],[139,33,83,29],[140,12,84,8],[140,16,84,8,"_yield$supabase$from$3"],[140,38,84,8],[140,47,84,32,"supabase"],[140,56,84,40],[140,57,84,40,"supabase"],[140,65,84,40],[140,66,85,11,"from"],[140,70,85,15],[140,71,85,16],[140,84,85,29],[140,85,85,30],[140,86,86,11,"delete"],[140,92,86,17],[140,93,86,18],[140,94,86,19],[140,95,87,11,"eq"],[140,97,87,13],[140,98,87,14],[140,107,87,23],[140,109,87,25,"userId"],[140,115,87,31],[140,116,87,32],[140,117,88,11,"eq"],[140,119,88,13],[140,120,88,14],[140,129,88,23],[140,131,88,25,"postId"],[140,137,88,31],[140,138,88,32],[141,14,84,16,"error"],[141,20,84,21],[141,23,84,21,"_yield$supabase$from$3"],[141,45,84,21],[141,46,84,16,"error"],[141,51,84,21],[142,12,90,8],[142,16,90,12,"error"],[142,22,90,17],[142,24,90,19],[142,30,90,25,"error"],[142,36,90,30],[143,12,91,8],[143,19,91,15],[143,23,91,19],[144,10,92,6],[146,10,94,6],[147,10,95,6],[147,14,95,6,"_yield$supabase$rpc2"],[147,34,95,6],[147,43,95,30,"supabase"],[147,52,95,38],[147,53,95,38,"supabase"],[147,61,95,38],[147,62,95,39,"rpc"],[147,65,95,42],[147,66,95,43],[147,84,95,61],[147,86,95,63],[148,14,96,8,"p_user_id"],[148,23,96,17],[148,25,96,19,"userId"],[148,31,96,25],[149,14,97,8,"p_post_id"],[149,23,97,17],[149,25,97,19,"postId"],[149,31,97,25],[150,14,98,8,"p_vote_type"],[150,25,98,19],[150,27,98,21,"voteType"],[151,12,99,6],[151,13,99,7],[151,14,99,8],[152,12,95,14,"error"],[152,17,95,19],[152,20,95,19,"_yield$supabase$rpc2"],[152,40,95,19],[152,41,95,14,"error"],[152,46,95,19],[153,10,101,6],[153,14,101,10,"error"],[153,19,101,15],[153,21,101,17],[153,27,101,23,"error"],[153,32,101,28],[154,10,102,6],[154,17,102,13,"voteType"],[154,25,102,21],[155,8,103,4],[155,9,103,5],[156,8,103,5],[156,24,81,4,"mutationFn"],[156,34,81,14,"mutationFn"],[156,35,81,14,"_x2"],[156,38,81,14],[157,10,81,14],[157,17,81,14,"_ref6"],[157,22,81,14],[157,23,81,14,"apply"],[157,28,81,14],[157,35,81,14,"arguments"],[157,44,81,14],[158,8,81,14],[159,6,81,14],[159,9,103,5],[160,6,104,4,"onSuccess"],[160,15,104,13],[160,17,104,15,"onSuccess"],[160,18,104,16,"_"],[160,19,104,17],[160,21,104,19,"variables"],[160,30,104,28],[160,35,104,33],[161,8,105,6],[162,8,106,6,"queryClient"],[162,19,106,17],[162,20,106,18,"invalidateQueries"],[162,37,106,35],[162,38,106,36],[163,10,106,38,"queryKey"],[163,18,106,46],[163,20,106,48],[163,21,106,49],[163,33,106,61],[163,35,106,63,"variables"],[163,44,106,72],[163,45,106,73,"userId"],[163,51,106,79],[164,8,106,81],[164,9,106,82],[164,10,106,83],[165,8,107,6],[166,8,108,6,"queryClient"],[166,19,108,17],[166,20,108,18,"invalidateQueries"],[166,37,108,35],[166,38,108,36],[167,10,108,38,"queryKey"],[167,18,108,46],[167,20,108,48],[167,21,108,49],[167,28,108,56],[168,8,108,58],[168,9,108,59],[168,10,108,60],[169,6,109,4],[170,4,110,2],[170,5,110,3],[170,6,110,4],[171,2,111,0],[172,2,111,1,"_s4"],[172,5,111,1],[172,6,77,16,"useVotePostMutation"],[172,25,77,35],[173,4,77,35],[173,12,78,22,"useQueryClient"],[173,31,78,36],[173,32,78,36,"useQueryClient"],[173,46,78,36],[173,48,80,9,"useMutation"],[173,67,80,20],[173,68,80,20,"useMutation"],[173,79,80,20],[174,2,80,20],[175,0,80,20],[175,3]],"functionMap":{"names":["<global>","usePostsQuery","useQuery$argument_0.queryFn","useUserVotesQuery","data.forEach$argument_0","useCreatePostMutation","useMutation$argument_0.mutationFn","useMutation$argument_0.onSuccess","useVotePostMutation"],"mappings":"AAA;OCI;aCG;KDW;CDI;OGG;aDG;oBEU;OFE;KCE;CHG;OKG;gBCI;KDe;eEC;KFG;CLE;OQG;gBFI;KEsB;eDC;KCK;CRE"},"hasCjsExports":false},"type":"js/module"}]}